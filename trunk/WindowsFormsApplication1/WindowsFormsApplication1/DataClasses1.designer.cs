#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CRUD")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertbaby1(baby1 instance);
    partial void Updatebaby1(baby1 instance);
    partial void Deletebaby1(baby1 instance);
    partial void InsertParentTable(ParentTable instance);
    partial void UpdateParentTable(ParentTable instance);
    partial void DeleteParentTable(ParentTable instance);
    partial void InsertChild1(Child1 instance);
    partial void UpdateChild1(Child1 instance);
    partial void DeleteChild1(Child1 instance);
    partial void InsertChild2(Child2 instance);
    partial void UpdateChild2(Child2 instance);
    partial void DeleteChild2(Child2 instance);
    partial void Insertcodevalue(codevalue instance);
    partial void Updatecodevalue(codevalue instance);
    partial void Deletecodevalue(codevalue instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WindowsFormsApplication1.Properties.Settings.Default.CRUDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<baby1> baby1s
		{
			get
			{
				return this.GetTable<baby1>();
			}
		}
		
		public System.Data.Linq.Table<ParentTable> ParentTables
		{
			get
			{
				return this.GetTable<ParentTable>();
			}
		}
		
		public System.Data.Linq.Table<Child1> Child1s
		{
			get
			{
				return this.GetTable<Child1>();
			}
		}
		
		public System.Data.Linq.Table<Child2> Child2s
		{
			get
			{
				return this.GetTable<Child2>();
			}
		}
		
		public System.Data.Linq.Table<codevalue> codevalues
		{
			get
			{
				return this.GetTable<codevalue>();
			}
		}
	}
	
	[Table(Name="dbo.baby1")]
	public partial class baby1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _baby1ID;
		
		private string _varcharField;
		
		private int _intField;
		
		private System.DateTime _dateTimeField;
		
		private System.Nullable<int> _codeValueID;
		
		private EntitySet<Child1> _Child1s;
		
		private EntitySet<Child2> _Child2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbaby1IDChanging(int value);
    partial void Onbaby1IDChanged();
    partial void OnvarcharFieldChanging(string value);
    partial void OnvarcharFieldChanged();
    partial void OnintFieldChanging(int value);
    partial void OnintFieldChanged();
    partial void OndateTimeFieldChanging(System.DateTime value);
    partial void OndateTimeFieldChanged();
    partial void OncodeValueIDChanging(System.Nullable<int> value);
    partial void OncodeValueIDChanged();
    #endregion
		
		public baby1()
		{
			this._Child1s = new EntitySet<Child1>(new Action<Child1>(this.attach_Child1s), new Action<Child1>(this.detach_Child1s));
			this._Child2s = new EntitySet<Child2>(new Action<Child2>(this.attach_Child2s), new Action<Child2>(this.detach_Child2s));
			OnCreated();
		}
		
		[Column(Storage="_baby1ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int baby1ID
		{
			get
			{
				return this._baby1ID;
			}
			set
			{
				if ((this._baby1ID != value))
				{
					this.Onbaby1IDChanging(value);
					this.SendPropertyChanging();
					this._baby1ID = value;
					this.SendPropertyChanged("baby1ID");
					this.Onbaby1IDChanged();
				}
			}
		}
		
		[Column(Storage="_varcharField", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string varcharField
		{
			get
			{
				return this._varcharField;
			}
			set
			{
				if ((this._varcharField != value))
				{
					this.OnvarcharFieldChanging(value);
					this.SendPropertyChanging();
					this._varcharField = value;
					this.SendPropertyChanged("varcharField");
					this.OnvarcharFieldChanged();
				}
			}
		}
		
		[Column(Storage="_intField", DbType="Int NOT NULL")]
		public int intField
		{
			get
			{
				return this._intField;
			}
			set
			{
				if ((this._intField != value))
				{
					this.OnintFieldChanging(value);
					this.SendPropertyChanging();
					this._intField = value;
					this.SendPropertyChanged("intField");
					this.OnintFieldChanged();
				}
			}
		}
		
		[Column(Storage="_dateTimeField", DbType="DateTime NOT NULL")]
		public System.DateTime dateTimeField
		{
			get
			{
				return this._dateTimeField;
			}
			set
			{
				if ((this._dateTimeField != value))
				{
					this.OndateTimeFieldChanging(value);
					this.SendPropertyChanging();
					this._dateTimeField = value;
					this.SendPropertyChanged("dateTimeField");
					this.OndateTimeFieldChanged();
				}
			}
		}
		
		[Column(Storage="_codeValueID", DbType="Int")]
		public System.Nullable<int> codeValueID
		{
			get
			{
				return this._codeValueID;
			}
			set
			{
				if ((this._codeValueID != value))
				{
					this.OncodeValueIDChanging(value);
					this.SendPropertyChanging();
					this._codeValueID = value;
					this.SendPropertyChanged("codeValueID");
					this.OncodeValueIDChanged();
				}
			}
		}
		
		[Association(Name="baby1_Child1", Storage="_Child1s", ThisKey="baby1ID", OtherKey="baby1ID")]
		public EntitySet<Child1> Child1s
		{
			get
			{
				return this._Child1s;
			}
			set
			{
				this._Child1s.Assign(value);
			}
		}
		
		[Association(Name="baby1_Child2", Storage="_Child2s", ThisKey="baby1ID", OtherKey="baby1ID")]
		public EntitySet<Child2> Child2s
		{
			get
			{
				return this._Child2s;
			}
			set
			{
				this._Child2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Child1s(Child1 entity)
		{
			this.SendPropertyChanging();
			entity.baby1 = this;
		}
		
		private void detach_Child1s(Child1 entity)
		{
			this.SendPropertyChanging();
			entity.baby1 = null;
		}
		
		private void attach_Child2s(Child2 entity)
		{
			this.SendPropertyChanging();
			entity.baby1 = this;
		}
		
		private void detach_Child2s(Child2 entity)
		{
			this.SendPropertyChanging();
			entity.baby1 = null;
		}
	}
	
	[Table(Name="dbo.Parent")]
	public partial class ParentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParentID;
		
		private string _varcharField;
		
		private int _intField;
		
		private System.DateTime _dateTimeField;
		
		private int _Child1ID;
		
		private int _Child2ID;
		
		private System.Nullable<int> _codeValueID;
		
		private EntityRef<Child1> _Child1;
		
		private EntityRef<Child2> _Child2;
		
		private EntityRef<codevalue> _codevalue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnvarcharFieldChanging(string value);
    partial void OnvarcharFieldChanged();
    partial void OnintFieldChanging(int value);
    partial void OnintFieldChanged();
    partial void OndateTimeFieldChanging(System.DateTime value);
    partial void OndateTimeFieldChanged();
    partial void OnChild1IDChanging(int value);
    partial void OnChild1IDChanged();
    partial void OnChild2IDChanging(int value);
    partial void OnChild2IDChanged();
    partial void OncodeValueIDChanging(System.Nullable<int> value);
    partial void OncodeValueIDChanged();
    #endregion
		
		public ParentTable()
		{
			this._Child1 = default(EntityRef<Child1>);
			this._Child2 = default(EntityRef<Child2>);
			this._codevalue = default(EntityRef<codevalue>);
			OnCreated();
		}
		
		[Column(Storage="_ParentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_varcharField", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string varcharField
		{
			get
			{
				return this._varcharField;
			}
			set
			{
				if ((this._varcharField != value))
				{
					this.OnvarcharFieldChanging(value);
					this.SendPropertyChanging();
					this._varcharField = value;
					this.SendPropertyChanged("varcharField");
					this.OnvarcharFieldChanged();
				}
			}
		}
		
		[Column(Storage="_intField", DbType="Int NOT NULL")]
		public int intField
		{
			get
			{
				return this._intField;
			}
			set
			{
				if ((this._intField != value))
				{
					this.OnintFieldChanging(value);
					this.SendPropertyChanging();
					this._intField = value;
					this.SendPropertyChanged("intField");
					this.OnintFieldChanged();
				}
			}
		}
		
		[Column(Storage="_dateTimeField", DbType="DateTime NOT NULL")]
		public System.DateTime dateTimeField
		{
			get
			{
				return this._dateTimeField;
			}
			set
			{
				if ((this._dateTimeField != value))
				{
					this.OndateTimeFieldChanging(value);
					this.SendPropertyChanging();
					this._dateTimeField = value;
					this.SendPropertyChanged("dateTimeField");
					this.OndateTimeFieldChanged();
				}
			}
		}
		
		[Column(Storage="_Child1ID", DbType="Int NOT NULL")]
		public int Child1ID
		{
			get
			{
				return this._Child1ID;
			}
			set
			{
				if ((this._Child1ID != value))
				{
					if (this._Child1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChild1IDChanging(value);
					this.SendPropertyChanging();
					this._Child1ID = value;
					this.SendPropertyChanged("Child1ID");
					this.OnChild1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Child2ID", DbType="Int NOT NULL")]
		public int Child2ID
		{
			get
			{
				return this._Child2ID;
			}
			set
			{
				if ((this._Child2ID != value))
				{
					if (this._Child2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChild2IDChanging(value);
					this.SendPropertyChanging();
					this._Child2ID = value;
					this.SendPropertyChanged("Child2ID");
					this.OnChild2IDChanged();
				}
			}
		}
		
		[Column(Storage="_codeValueID", DbType="Int")]
		public System.Nullable<int> codeValueID
		{
			get
			{
				return this._codeValueID;
			}
			set
			{
				if ((this._codeValueID != value))
				{
					if (this._codevalue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeValueIDChanging(value);
					this.SendPropertyChanging();
					this._codeValueID = value;
					this.SendPropertyChanged("codeValueID");
					this.OncodeValueIDChanged();
				}
			}
		}
		
		[Association(Name="Child1_Parent", Storage="_Child1", ThisKey="Child1ID", OtherKey="Child1ID", IsForeignKey=true)]
		public Child1 Child1
		{
			get
			{
				return this._Child1.Entity;
			}
			set
			{
				Child1 previousValue = this._Child1.Entity;
				if (((previousValue != value) 
							|| (this._Child1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child1.Entity = null;
						previousValue.ParentTables.Remove(this);
					}
					this._Child1.Entity = value;
					if ((value != null))
					{
						value.ParentTables.Add(this);
						this._Child1ID = value.Child1ID;
					}
					else
					{
						this._Child1ID = default(int);
					}
					this.SendPropertyChanged("Child1");
				}
			}
		}
		
		[Association(Name="Child2_Parent", Storage="_Child2", ThisKey="Child2ID", OtherKey="Child2ID", IsForeignKey=true)]
		public Child2 Child2
		{
			get
			{
				return this._Child2.Entity;
			}
			set
			{
				Child2 previousValue = this._Child2.Entity;
				if (((previousValue != value) 
							|| (this._Child2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child2.Entity = null;
						previousValue.ParentTables.Remove(this);
					}
					this._Child2.Entity = value;
					if ((value != null))
					{
						value.ParentTables.Add(this);
						this._Child2ID = value.Child2ID;
					}
					else
					{
						this._Child2ID = default(int);
					}
					this.SendPropertyChanged("Child2");
				}
			}
		}
		
		[Association(Name="codevalue_Parent", Storage="_codevalue", ThisKey="codeValueID", OtherKey="codevalueID", IsForeignKey=true)]
		public codevalue codevalue
		{
			get
			{
				return this._codevalue.Entity;
			}
			set
			{
				codevalue previousValue = this._codevalue.Entity;
				if (((previousValue != value) 
							|| (this._codevalue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._codevalue.Entity = null;
						previousValue.ParentTables.Remove(this);
					}
					this._codevalue.Entity = value;
					if ((value != null))
					{
						value.ParentTables.Add(this);
						this._codeValueID = value.codevalueID;
					}
					else
					{
						this._codeValueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("codevalue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Child1")]
	public partial class Child1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Child1ID;
		
		private string _varcharField;
		
		private int _intField;
		
		private System.DateTime _dateTimeField;
		
		private int _baby1ID;
		
		private System.Nullable<int> _codeValueID;
		
		private EntitySet<ParentTable> _ParentTables;
		
		private EntityRef<baby1> _baby1;
		
		private EntityRef<codevalue> _codevalue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChild1IDChanging(int value);
    partial void OnChild1IDChanged();
    partial void OnvarcharFieldChanging(string value);
    partial void OnvarcharFieldChanged();
    partial void OnintFieldChanging(int value);
    partial void OnintFieldChanged();
    partial void OndateTimeFieldChanging(System.DateTime value);
    partial void OndateTimeFieldChanged();
    partial void Onbaby1IDChanging(int value);
    partial void Onbaby1IDChanged();
    partial void OncodeValueIDChanging(System.Nullable<int> value);
    partial void OncodeValueIDChanged();
    #endregion
		
		public Child1()
		{
			this._ParentTables = new EntitySet<ParentTable>(new Action<ParentTable>(this.attach_ParentTables), new Action<ParentTable>(this.detach_ParentTables));
			this._baby1 = default(EntityRef<baby1>);
			this._codevalue = default(EntityRef<codevalue>);
			OnCreated();
		}
		
		[Column(Storage="_Child1ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Child1ID
		{
			get
			{
				return this._Child1ID;
			}
			set
			{
				if ((this._Child1ID != value))
				{
					this.OnChild1IDChanging(value);
					this.SendPropertyChanging();
					this._Child1ID = value;
					this.SendPropertyChanged("Child1ID");
					this.OnChild1IDChanged();
				}
			}
		}
		
		[Column(Storage="_varcharField", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string varcharField
		{
			get
			{
				return this._varcharField;
			}
			set
			{
				if ((this._varcharField != value))
				{
					this.OnvarcharFieldChanging(value);
					this.SendPropertyChanging();
					this._varcharField = value;
					this.SendPropertyChanged("varcharField");
					this.OnvarcharFieldChanged();
				}
			}
		}
		
		[Column(Storage="_intField", DbType="Int NOT NULL")]
		public int intField
		{
			get
			{
				return this._intField;
			}
			set
			{
				if ((this._intField != value))
				{
					this.OnintFieldChanging(value);
					this.SendPropertyChanging();
					this._intField = value;
					this.SendPropertyChanged("intField");
					this.OnintFieldChanged();
				}
			}
		}
		
		[Column(Storage="_dateTimeField", DbType="DateTime NOT NULL")]
		public System.DateTime dateTimeField
		{
			get
			{
				return this._dateTimeField;
			}
			set
			{
				if ((this._dateTimeField != value))
				{
					this.OndateTimeFieldChanging(value);
					this.SendPropertyChanging();
					this._dateTimeField = value;
					this.SendPropertyChanged("dateTimeField");
					this.OndateTimeFieldChanged();
				}
			}
		}
		
		[Column(Storage="_baby1ID", DbType="Int NOT NULL")]
		public int baby1ID
		{
			get
			{
				return this._baby1ID;
			}
			set
			{
				if ((this._baby1ID != value))
				{
					if (this._baby1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbaby1IDChanging(value);
					this.SendPropertyChanging();
					this._baby1ID = value;
					this.SendPropertyChanged("baby1ID");
					this.Onbaby1IDChanged();
				}
			}
		}
		
		[Column(Storage="_codeValueID", DbType="Int")]
		public System.Nullable<int> codeValueID
		{
			get
			{
				return this._codeValueID;
			}
			set
			{
				if ((this._codeValueID != value))
				{
					if (this._codevalue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeValueIDChanging(value);
					this.SendPropertyChanging();
					this._codeValueID = value;
					this.SendPropertyChanged("codeValueID");
					this.OncodeValueIDChanged();
				}
			}
		}
		
		[Association(Name="Child1_Parent", Storage="_ParentTables", ThisKey="Child1ID", OtherKey="Child1ID")]
		public EntitySet<ParentTable> ParentTables
		{
			get
			{
				return this._ParentTables;
			}
			set
			{
				this._ParentTables.Assign(value);
			}
		}
		
		[Association(Name="baby1_Child1", Storage="_baby1", ThisKey="baby1ID", OtherKey="baby1ID", IsForeignKey=true)]
		public baby1 baby1
		{
			get
			{
				return this._baby1.Entity;
			}
			set
			{
				baby1 previousValue = this._baby1.Entity;
				if (((previousValue != value) 
							|| (this._baby1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._baby1.Entity = null;
						previousValue.Child1s.Remove(this);
					}
					this._baby1.Entity = value;
					if ((value != null))
					{
						value.Child1s.Add(this);
						this._baby1ID = value.baby1ID;
					}
					else
					{
						this._baby1ID = default(int);
					}
					this.SendPropertyChanged("baby1");
				}
			}
		}
		
		[Association(Name="codevalue_Child1", Storage="_codevalue", ThisKey="codeValueID", OtherKey="codevalueID", IsForeignKey=true)]
		public codevalue codevalue
		{
			get
			{
				return this._codevalue.Entity;
			}
			set
			{
				codevalue previousValue = this._codevalue.Entity;
				if (((previousValue != value) 
							|| (this._codevalue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._codevalue.Entity = null;
						previousValue.Child1s.Remove(this);
					}
					this._codevalue.Entity = value;
					if ((value != null))
					{
						value.Child1s.Add(this);
						this._codeValueID = value.codevalueID;
					}
					else
					{
						this._codeValueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("codevalue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.Child1 = this;
		}
		
		private void detach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.Child1 = null;
		}
	}
	
	[Table(Name="dbo.Child2")]
	public partial class Child2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Child2ID;
		
		private string _varcharField;
		
		private int _intField;
		
		private System.DateTime _dateTimeField;
		
		private int _baby1ID;
		
		private System.Nullable<int> _codeValueID;
		
		private EntitySet<ParentTable> _ParentTables;
		
		private EntityRef<baby1> _baby1;
		
		private EntityRef<codevalue> _codevalue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChild2IDChanging(int value);
    partial void OnChild2IDChanged();
    partial void OnvarcharFieldChanging(string value);
    partial void OnvarcharFieldChanged();
    partial void OnintFieldChanging(int value);
    partial void OnintFieldChanged();
    partial void OndateTimeFieldChanging(System.DateTime value);
    partial void OndateTimeFieldChanged();
    partial void Onbaby1IDChanging(int value);
    partial void Onbaby1IDChanged();
    partial void OncodeValueIDChanging(System.Nullable<int> value);
    partial void OncodeValueIDChanged();
    #endregion
		
		public Child2()
		{
			this._ParentTables = new EntitySet<ParentTable>(new Action<ParentTable>(this.attach_ParentTables), new Action<ParentTable>(this.detach_ParentTables));
			this._baby1 = default(EntityRef<baby1>);
			this._codevalue = default(EntityRef<codevalue>);
			OnCreated();
		}
		
		[Column(Storage="_Child2ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Child2ID
		{
			get
			{
				return this._Child2ID;
			}
			set
			{
				if ((this._Child2ID != value))
				{
					this.OnChild2IDChanging(value);
					this.SendPropertyChanging();
					this._Child2ID = value;
					this.SendPropertyChanged("Child2ID");
					this.OnChild2IDChanged();
				}
			}
		}
		
		[Column(Storage="_varcharField", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string varcharField
		{
			get
			{
				return this._varcharField;
			}
			set
			{
				if ((this._varcharField != value))
				{
					this.OnvarcharFieldChanging(value);
					this.SendPropertyChanging();
					this._varcharField = value;
					this.SendPropertyChanged("varcharField");
					this.OnvarcharFieldChanged();
				}
			}
		}
		
		[Column(Storage="_intField", DbType="Int NOT NULL")]
		public int intField
		{
			get
			{
				return this._intField;
			}
			set
			{
				if ((this._intField != value))
				{
					this.OnintFieldChanging(value);
					this.SendPropertyChanging();
					this._intField = value;
					this.SendPropertyChanged("intField");
					this.OnintFieldChanged();
				}
			}
		}
		
		[Column(Storage="_dateTimeField", DbType="DateTime NOT NULL")]
		public System.DateTime dateTimeField
		{
			get
			{
				return this._dateTimeField;
			}
			set
			{
				if ((this._dateTimeField != value))
				{
					this.OndateTimeFieldChanging(value);
					this.SendPropertyChanging();
					this._dateTimeField = value;
					this.SendPropertyChanged("dateTimeField");
					this.OndateTimeFieldChanged();
				}
			}
		}
		
		[Column(Storage="_baby1ID", DbType="Int NOT NULL")]
		public int baby1ID
		{
			get
			{
				return this._baby1ID;
			}
			set
			{
				if ((this._baby1ID != value))
				{
					if (this._baby1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbaby1IDChanging(value);
					this.SendPropertyChanging();
					this._baby1ID = value;
					this.SendPropertyChanged("baby1ID");
					this.Onbaby1IDChanged();
				}
			}
		}
		
		[Column(Storage="_codeValueID", DbType="Int")]
		public System.Nullable<int> codeValueID
		{
			get
			{
				return this._codeValueID;
			}
			set
			{
				if ((this._codeValueID != value))
				{
					if (this._codevalue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeValueIDChanging(value);
					this.SendPropertyChanging();
					this._codeValueID = value;
					this.SendPropertyChanged("codeValueID");
					this.OncodeValueIDChanged();
				}
			}
		}
		
		[Association(Name="Child2_Parent", Storage="_ParentTables", ThisKey="Child2ID", OtherKey="Child2ID")]
		public EntitySet<ParentTable> ParentTables
		{
			get
			{
				return this._ParentTables;
			}
			set
			{
				this._ParentTables.Assign(value);
			}
		}
		
		[Association(Name="baby1_Child2", Storage="_baby1", ThisKey="baby1ID", OtherKey="baby1ID", IsForeignKey=true)]
		public baby1 baby1
		{
			get
			{
				return this._baby1.Entity;
			}
			set
			{
				baby1 previousValue = this._baby1.Entity;
				if (((previousValue != value) 
							|| (this._baby1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._baby1.Entity = null;
						previousValue.Child2s.Remove(this);
					}
					this._baby1.Entity = value;
					if ((value != null))
					{
						value.Child2s.Add(this);
						this._baby1ID = value.baby1ID;
					}
					else
					{
						this._baby1ID = default(int);
					}
					this.SendPropertyChanged("baby1");
				}
			}
		}
		
		[Association(Name="codevalue_Child2", Storage="_codevalue", ThisKey="codeValueID", OtherKey="codevalueID", IsForeignKey=true)]
		public codevalue codevalue
		{
			get
			{
				return this._codevalue.Entity;
			}
			set
			{
				codevalue previousValue = this._codevalue.Entity;
				if (((previousValue != value) 
							|| (this._codevalue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._codevalue.Entity = null;
						previousValue.Child2s.Remove(this);
					}
					this._codevalue.Entity = value;
					if ((value != null))
					{
						value.Child2s.Add(this);
						this._codeValueID = value.codevalueID;
					}
					else
					{
						this._codeValueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("codevalue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.Child2 = this;
		}
		
		private void detach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.Child2 = null;
		}
	}
	
	[Table(Name="dbo.codevalue")]
	public partial class codevalue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _codevalueID;
		
		private string _display;
		
		private int _codeSetId;
		
		private EntitySet<ParentTable> _ParentTables;
		
		private EntitySet<Child1> _Child1s;
		
		private EntitySet<Child2> _Child2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodevalueIDChanging(int value);
    partial void OncodevalueIDChanged();
    partial void OndisplayChanging(string value);
    partial void OndisplayChanged();
    partial void OncodeSetIdChanging(int value);
    partial void OncodeSetIdChanged();
    #endregion
		
		public codevalue()
		{
			this._ParentTables = new EntitySet<ParentTable>(new Action<ParentTable>(this.attach_ParentTables), new Action<ParentTable>(this.detach_ParentTables));
			this._Child1s = new EntitySet<Child1>(new Action<Child1>(this.attach_Child1s), new Action<Child1>(this.detach_Child1s));
			this._Child2s = new EntitySet<Child2>(new Action<Child2>(this.attach_Child2s), new Action<Child2>(this.detach_Child2s));
			OnCreated();
		}
		
		[Column(Storage="_codevalueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int codevalueID
		{
			get
			{
				return this._codevalueID;
			}
			set
			{
				if ((this._codevalueID != value))
				{
					this.OncodevalueIDChanging(value);
					this.SendPropertyChanging();
					this._codevalueID = value;
					this.SendPropertyChanged("codevalueID");
					this.OncodevalueIDChanged();
				}
			}
		}
		
		[Column(Storage="_display", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string display
		{
			get
			{
				return this._display;
			}
			set
			{
				if ((this._display != value))
				{
					this.OndisplayChanging(value);
					this.SendPropertyChanging();
					this._display = value;
					this.SendPropertyChanged("display");
					this.OndisplayChanged();
				}
			}
		}
		
		[Column(Storage="_codeSetId", DbType="Int NOT NULL")]
		public int codeSetId
		{
			get
			{
				return this._codeSetId;
			}
			set
			{
				if ((this._codeSetId != value))
				{
					this.OncodeSetIdChanging(value);
					this.SendPropertyChanging();
					this._codeSetId = value;
					this.SendPropertyChanged("codeSetId");
					this.OncodeSetIdChanged();
				}
			}
		}
		
		[Association(Name="codevalue_Parent", Storage="_ParentTables", ThisKey="codevalueID", OtherKey="codeValueID")]
		public EntitySet<ParentTable> ParentTables
		{
			get
			{
				return this._ParentTables;
			}
			set
			{
				this._ParentTables.Assign(value);
			}
		}
		
		[Association(Name="codevalue_Child1", Storage="_Child1s", ThisKey="codevalueID", OtherKey="codeValueID")]
		public EntitySet<Child1> Child1s
		{
			get
			{
				return this._Child1s;
			}
			set
			{
				this._Child1s.Assign(value);
			}
		}
		
		[Association(Name="codevalue_Child2", Storage="_Child2s", ThisKey="codevalueID", OtherKey="codeValueID")]
		public EntitySet<Child2> Child2s
		{
			get
			{
				return this._Child2s;
			}
			set
			{
				this._Child2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = this;
		}
		
		private void detach_ParentTables(ParentTable entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = null;
		}
		
		private void attach_Child1s(Child1 entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = this;
		}
		
		private void detach_Child1s(Child1 entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = null;
		}
		
		private void attach_Child2s(Child2 entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = this;
		}
		
		private void detach_Child2s(Child2 entity)
		{
			this.SendPropertyChanging();
			entity.codevalue = null;
		}
	}
}
#pragma warning restore 1591
