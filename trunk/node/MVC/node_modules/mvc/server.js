var libpath = require("path"),
   http = require("http"),
   fs = require("fs"),
   url = require("url"),
   mime = require("mime"),
   ext = require("ext"),
   requireindex = require('requireindex'),
   view = require("./view.js"),
   controllers = requireindex("./Controllers");
   
exports.port = 80;
exports.debug = false;
exports.excludes = "node_modules|Controllers|Models|Views";
exports.defaultPath = "./";

var path = ".";

function startServer()
{
	http.createServer(function (request, response)
	{
		var uri = url.parse(request.url).pathname;
		var filename = libpath.join(path, uri);

		//kill the process; comment out for production
		if (exports.debug && filename == "kill")
		{
		   process.kill();
		}
		
		//is this a path or a static file?
		var extname = libpath.extname(filename);
		if(ext.isNullOrEmpty(extname)) //path
		{
			if(filename == "./")
			{
				filename = exports.defaultPath;
			}
			serveMVC(filename, request, response);
		}
		else //file
		{
		   serveStaticFile(filename, request, response);
		}
	
	}).listen(exports.port);
}

function serveMVC(filename, request, response)
{
		//should we look for index.html?
		 var defaultDoc = filename + "index.html";
		 libpath.exists(defaultDoc, function (exists)
		 {
			if(exists)//possibly a static file
			{
		      serveStaticFile(defaultDoc);
			}
			else//assume mvc
			{
				filename = filename.toLowerCase();
				var methodTree = filename.split("/");

				if(methodTree.length > 0)//does module exits?
				{
					var method = controllers;
					for(i=0;i < methodTree.length;i++)//move through the tree
					{
						method = method[methodTree[i]];
					}
					
					if(typeof(method) == "function")
					{
						method(request, response, filename, render);
					}
					else if (typeof(method) == "object" && typeof(method["index"]) == "function")//should we call the index method?
					{
						filename += "/index";
						method["index"](request, response, filename, render);
					}
					else
					{
						return404(response);
					}
				}
				else
				{
					return404(response);
				}
			}
		 });
}
function serveStaticFile(filename, request, response)
{
	if(!filename.match(new RegExp(exports.excludes,"gi")))
	{
		/*
			All files that can be served should be lowercase.
			The rule of thumb is that all server code should be named in sentence case; on a unix/linux system filenames are case sensitive.
			We are doing a regex to exclude specific files, because windows doesn't care about casing.
		*/
		filename = filename.toLowerCase();
		libpath.exists(filename, function (exists)
		{
			if(exists)
			{
				fs.readFile(filename, "binary", function (err, file)
				{
					if (err)
					{
						return500(err, response);
					}
					var type = mime.lookup(filename);
					response.writeHead(200,
					{
						"Content-Type": type
					});
					response.write(file, "binary");
					response.end();
					return;
				});
			}
			else
			{
				return return404(response);
			}
		});
   }
   else
   {
   	return return404(response);
   }
}

function render(model, filename, response)
{
	view.render(filename, model, function(text, err)
	{
		if(err && ext.isNullOrEmpty(text))
		{
			return404(response);
		}
		else if(err)
		{
			return500(text, response);
		}
		else
		{
			return200(text, response);
		}
	});
}

function return404(response)
{
	response.writeHead(404,
	{
		"Content-Type": "text/plain"
	});
	response.write("404 Not Found\n");
	response.end();
	return;
}

function return500(text, response)
{
	response.writeHead(500,
	{
		"Content-Type": "text/plain"
	});
	response.write(text + "\n");
	response.end();
	return;
}

function return200(text, response)
{
	response.writeHead(200,
	{
		"Content-Type": "text/html"
	});
	response.write(text);
	response.end();
	return;
}

exports.start = startServer;

