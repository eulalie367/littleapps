#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductRecomendation.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ProductRecomendation")]
	public partial class dcProductsRecomendation : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertAttributeType(AttributeType instance);
    partial void UpdateAttributeType(AttributeType instance);
    partial void DeleteAttributeType(AttributeType instance);
    partial void InsertAttributeValue(AttributeValue instance);
    partial void UpdateAttributeValue(AttributeValue instance);
    partial void DeleteAttributeValue(AttributeValue instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductAttributeValue(ProductAttributeValue instance);
    partial void UpdateProductAttributeValue(ProductAttributeValue instance);
    partial void DeleteProductAttributeValue(ProductAttributeValue instance);
    partial void InsertProductRating(ProductRating instance);
    partial void UpdateProductRating(ProductRating instance);
    partial void DeleteProductRating(ProductRating instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertProductTypeAttribute(ProductTypeAttribute instance);
    partial void UpdateProductTypeAttribute(ProductTypeAttribute instance);
    partial void DeleteProductTypeAttribute(ProductTypeAttribute instance);
    #endregion
		
		public dcProductsRecomendation(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcProductsRecomendation(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcProductsRecomendation(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcProductsRecomendation(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<AttributeType> AttributeTypes
		{
			get
			{
				return this.GetTable<AttributeType>();
			}
		}
		
		public System.Data.Linq.Table<AttributeValue> AttributeValues
		{
			get
			{
				return this.GetTable<AttributeValue>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductAttributeValue> ProductAttributeValues
		{
			get
			{
				return this.GetTable<ProductAttributeValue>();
			}
		}
		
		public System.Data.Linq.Table<ProductRating> ProductRatings
		{
			get
			{
				return this.GetTable<ProductRating>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		public System.Data.Linq.Table<ProductTypeAttribute> ProductTypeAttributes
		{
			get
			{
				return this.GetTable<ProductTypeAttribute>();
			}
		}
		
		public System.Data.Linq.Table<View_Product> View_Products
		{
			get
			{
				return this.GetTable<View_Product>();
			}
		}
		
		public System.Data.Linq.Table<View_ProductAttribute> View_ProductAttributes
		{
			get
			{
				return this.GetTable<View_ProductAttribute>();
			}
		}
		
		[Function(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.sp_alterdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_alterdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_creatediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_creatediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_dropdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_dropdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_renamediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_renamediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Attribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeID;
		
		private System.Nullable<int> _AttributeTypeID;
		
		private string _Name;
		
		private System.Nullable<int> _ParentAttributeID;
		
		private EntityRef<AttributeType> _AttributeType;
		
		private EntitySet<AttributeValue> _AttributeValues;
		
		private EntitySet<ProductTypeAttribute> _ProductTypeAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    partial void OnAttributeTypeIDChanging(System.Nullable<int> value);
    partial void OnAttributeTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentAttributeIDChanging(System.Nullable<int> value);
    partial void OnParentAttributeIDChanged();
    #endregion
		
		public Attribute()
		{
			this._AttributeType = default(EntityRef<AttributeType>);
			this._AttributeValues = new EntitySet<AttributeValue>(new Action<AttributeValue>(this.attach_AttributeValues), new Action<AttributeValue>(this.detach_AttributeValues));
			this._ProductTypeAttributes = new EntitySet<ProductTypeAttribute>(new Action<ProductTypeAttribute>(this.attach_ProductTypeAttributes), new Action<ProductTypeAttribute>(this.detach_ProductTypeAttributes));
			OnCreated();
		}
		
		[Column(Storage="_AttributeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeTypeID", DbType="Int")]
		public System.Nullable<int> AttributeTypeID
		{
			get
			{
				return this._AttributeTypeID;
			}
			set
			{
				if ((this._AttributeTypeID != value))
				{
					if (this._AttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeID = value;
					this.SendPropertyChanged("AttributeTypeID");
					this.OnAttributeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentAttributeID", DbType="Int")]
		public System.Nullable<int> ParentAttributeID
		{
			get
			{
				return this._ParentAttributeID;
			}
			set
			{
				if ((this._ParentAttributeID != value))
				{
					this.OnParentAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentAttributeID = value;
					this.SendPropertyChanged("ParentAttributeID");
					this.OnParentAttributeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Attribute_AttributeType", Storage="_AttributeType", ThisKey="AttributeTypeID", IsForeignKey=true)]
		public AttributeType AttributeType
		{
			get
			{
				return this._AttributeType.Entity;
			}
			set
			{
				AttributeType previousValue = this._AttributeType.Entity;
				if (((previousValue != value) 
							|| (this._AttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeType.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._AttributeType.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._AttributeTypeID = value.AttributeTypeID;
					}
					else
					{
						this._AttributeTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AttributeType");
				}
			}
		}
		
		[Association(Name="FK_AttributeValue_Attribute", Storage="_AttributeValues", OtherKey="AttributeID", DeleteRule="NO ACTION")]
		public EntitySet<AttributeValue> AttributeValues
		{
			get
			{
				return this._AttributeValues;
			}
			set
			{
				this._AttributeValues.Assign(value);
			}
		}
		
		[Association(Name="FK_ProductTypeAttribute_Attribute", Storage="_ProductTypeAttributes", OtherKey="AttributeID", DeleteRule="NO ACTION")]
		public EntitySet<ProductTypeAttribute> ProductTypeAttributes
		{
			get
			{
				return this._ProductTypeAttributes;
			}
			set
			{
				this._ProductTypeAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_ProductTypeAttributes(ProductTypeAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_ProductTypeAttributes(ProductTypeAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
	}
	
	[Table(Name="dbo.AttributeType")]
	public partial class AttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeTypeID;
		
		private string _Name;
		
		private EntitySet<Attribute> _Attributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeTypeIDChanging(int value);
    partial void OnAttributeTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AttributeType()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			OnCreated();
		}
		
		[Column(Storage="_AttributeTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttributeTypeID
		{
			get
			{
				return this._AttributeTypeID;
			}
			set
			{
				if ((this._AttributeTypeID != value))
				{
					this.OnAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeID = value;
					this.SendPropertyChanged("AttributeTypeID");
					this.OnAttributeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Attribute_AttributeType", Storage="_Attributes", OtherKey="AttributeTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = null;
		}
	}
	
	[Table(Name="dbo.AttributeValue")]
	public partial class AttributeValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AttributeValueID;
		
		private int _ProductRatingID;
		
		private int _AttributeID;
		
		private string _Text;
		
		private System.Nullable<long> _Int;
		
		private System.Nullable<double> _Float;
		
		private System.Nullable<decimal> _Decimal;
		
		private System.Nullable<bool> _Bit;
		
		private System.Nullable<System.DateTime> _Time;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<ProductRating> _ProductRating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeValueIDChanging(long value);
    partial void OnAttributeValueIDChanged();
    partial void OnProductRatingIDChanging(int value);
    partial void OnProductRatingIDChanged();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnIntChanging(System.Nullable<long> value);
    partial void OnIntChanged();
    partial void OnFloatChanging(System.Nullable<double> value);
    partial void OnFloatChanged();
    partial void OnDecimalChanging(System.Nullable<decimal> value);
    partial void OnDecimalChanged();
    partial void OnBitChanging(System.Nullable<bool> value);
    partial void OnBitChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    #endregion
		
		public AttributeValue()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._ProductRating = default(EntityRef<ProductRating>);
			OnCreated();
		}
		
		[Column(Storage="_AttributeValueID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AttributeValueID
		{
			get
			{
				return this._AttributeValueID;
			}
			set
			{
				if ((this._AttributeValueID != value))
				{
					this.OnAttributeValueIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeValueID = value;
					this.SendPropertyChanged("AttributeValueID");
					this.OnAttributeValueIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductRatingID", DbType="Int NOT NULL")]
		public int ProductRatingID
		{
			get
			{
				return this._ProductRatingID;
			}
			set
			{
				if ((this._ProductRatingID != value))
				{
					if (this._ProductRating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductRatingIDChanging(value);
					this.SendPropertyChanging();
					this._ProductRatingID = value;
					this.SendPropertyChanged("ProductRatingID");
					this.OnProductRatingIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Int", DbType="BigInt")]
		public System.Nullable<long> Int
		{
			get
			{
				return this._Int;
			}
			set
			{
				if ((this._Int != value))
				{
					this.OnIntChanging(value);
					this.SendPropertyChanging();
					this._Int = value;
					this.SendPropertyChanged("Int");
					this.OnIntChanged();
				}
			}
		}
		
		[Column(Storage="_Float", DbType="Float")]
		public System.Nullable<double> Float
		{
			get
			{
				return this._Float;
			}
			set
			{
				if ((this._Float != value))
				{
					this.OnFloatChanging(value);
					this.SendPropertyChanging();
					this._Float = value;
					this.SendPropertyChanged("Float");
					this.OnFloatChanged();
				}
			}
		}
		
		[Column(Storage="_Decimal", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Decimal
		{
			get
			{
				return this._Decimal;
			}
			set
			{
				if ((this._Decimal != value))
				{
					this.OnDecimalChanging(value);
					this.SendPropertyChanging();
					this._Decimal = value;
					this.SendPropertyChanged("Decimal");
					this.OnDecimalChanged();
				}
			}
		}
		
		[Column(Storage="_Bit", DbType="Bit")]
		public System.Nullable<bool> Bit
		{
			get
			{
				return this._Bit;
			}
			set
			{
				if ((this._Bit != value))
				{
					this.OnBitChanging(value);
					this.SendPropertyChanging();
					this._Bit = value;
					this.SendPropertyChanged("Bit");
					this.OnBitChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Association(Name="FK_AttributeValue_Attribute", Storage="_Attribute", ThisKey="AttributeID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.AttributeValues.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.AttributeValues.Add(this);
						this._AttributeID = value.AttributeID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[Association(Name="FK_AttributeValue_ProductRating", Storage="_ProductRating", ThisKey="ProductRatingID", IsForeignKey=true)]
		public ProductRating ProductRating
		{
			get
			{
				return this._ProductRating.Entity;
			}
			set
			{
				ProductRating previousValue = this._ProductRating.Entity;
				if (((previousValue != value) 
							|| (this._ProductRating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductRating.Entity = null;
						previousValue.AttributeValues.Remove(this);
					}
					this._ProductRating.Entity = value;
					if ((value != null))
					{
						value.AttributeValues.Add(this);
						this._ProductRatingID = value.ProductRatingID;
					}
					else
					{
						this._ProductRatingID = default(int);
					}
					this.SendPropertyChanged("ProductRating");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private System.Nullable<int> _ProductTypeID;
		
		private string _Name;
		
		private EntityRef<ProductType> _ProductType;
		
		private EntitySet<ProductRating> _ProductRatings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductTypeIDChanging(System.Nullable<int> value);
    partial void OnProductTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Product()
		{
			this._ProductType = default(EntityRef<ProductType>);
			this._ProductRatings = new EntitySet<ProductRating>(new Action<ProductRating>(this.attach_ProductRatings), new Action<ProductRating>(this.detach_ProductRatings));
			OnCreated();
		}
		
		[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductTypeID", DbType="Int")]
		public System.Nullable<int> ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Product_ProductType", Storage="_ProductType", ThisKey="ProductTypeID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductTypeID = value.ProductTypeID;
					}
					else
					{
						this._ProductTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		[Association(Name="FK_ProductRating_Product", Storage="_ProductRatings", OtherKey="ProductID", DeleteRule="NO ACTION")]
		public EntitySet<ProductRating> ProductRatings
		{
			get
			{
				return this._ProductRatings;
			}
			set
			{
				this._ProductRatings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductRatings(ProductRating entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductRatings(ProductRating entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ProductAttributeValue")]
	public partial class ProductAttributeValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeTypeValueID;
		
		private System.Nullable<int> _AttributeTypeID;
		
		private string _Name;
		
		private System.Nullable<int> _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeTypeValueIDChanging(int value);
    partial void OnAttributeTypeValueIDChanged();
    partial void OnAttributeTypeIDChanging(System.Nullable<int> value);
    partial void OnAttributeTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    #endregion
		
		public ProductAttributeValue()
		{
			OnCreated();
		}
		
		[Column(Storage="_AttributeTypeValueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttributeTypeValueID
		{
			get
			{
				return this._AttributeTypeValueID;
			}
			set
			{
				if ((this._AttributeTypeValueID != value))
				{
					this.OnAttributeTypeValueIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeValueID = value;
					this.SendPropertyChanged("AttributeTypeValueID");
					this.OnAttributeTypeValueIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeTypeID", DbType="Int")]
		public System.Nullable<int> AttributeTypeID
		{
			get
			{
				return this._AttributeTypeID;
			}
			set
			{
				if ((this._AttributeTypeID != value))
				{
					this.OnAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeID = value;
					this.SendPropertyChanged("AttributeTypeID");
					this.OnAttributeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductRating")]
	public partial class ProductRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductRatingID;
		
		private int _UserID;
		
		private System.Nullable<int> _ProductID;
		
		private System.Nullable<int> _VendorID;
		
		private EntitySet<AttributeValue> _AttributeValues;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductRatingIDChanging(int value);
    partial void OnProductRatingIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    #endregion
		
		public ProductRating()
		{
			this._AttributeValues = new EntitySet<AttributeValue>(new Action<AttributeValue>(this.attach_AttributeValues), new Action<AttributeValue>(this.detach_AttributeValues));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductRatingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductRatingID
		{
			get
			{
				return this._ProductRatingID;
			}
			set
			{
				if ((this._ProductRatingID != value))
				{
					this.OnProductRatingIDChanging(value);
					this.SendPropertyChanging();
					this._ProductRatingID = value;
					this.SendPropertyChanged("ProductRatingID");
					this.OnProductRatingIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[Association(Name="FK_AttributeValue_ProductRating", Storage="_AttributeValues", OtherKey="ProductRatingID", DeleteRule="NO ACTION")]
		public EntitySet<AttributeValue> AttributeValues
		{
			get
			{
				return this._AttributeValues;
			}
			set
			{
				this._AttributeValues.Assign(value);
			}
		}
		
		[Association(Name="FK_ProductRating_Product", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductRatings.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductRatings.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.ProductRating = this;
		}
		
		private void detach_AttributeValues(AttributeValue entity)
		{
			this.SendPropertyChanging();
			entity.ProductRating = null;
		}
	}
	
	[Table(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductTypeID;
		
		private string _Name;
		
		private System.Nullable<int> _ParentProductTypeID;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<ProductTypeAttribute> _ProductTypeAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentProductTypeIDChanging(System.Nullable<int> value);
    partial void OnParentProductTypeIDChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._ProductTypeAttributes = new EntitySet<ProductTypeAttribute>(new Action<ProductTypeAttribute>(this.attach_ProductTypeAttributes), new Action<ProductTypeAttribute>(this.detach_ProductTypeAttributes));
			OnCreated();
		}
		
		[Column(Storage="_ProductTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentProductTypeID", DbType="Int")]
		public System.Nullable<int> ParentProductTypeID
		{
			get
			{
				return this._ParentProductTypeID;
			}
			set
			{
				if ((this._ParentProductTypeID != value))
				{
					this.OnParentProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentProductTypeID = value;
					this.SendPropertyChanged("ParentProductTypeID");
					this.OnParentProductTypeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Product_ProductType", Storage="_Products", OtherKey="ProductTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[Association(Name="FK_ProductTypeAttribute_ProductType", Storage="_ProductTypeAttributes", OtherKey="ProductTypeID", DeleteRule="NO ACTION")]
		public EntitySet<ProductTypeAttribute> ProductTypeAttributes
		{
			get
			{
				return this._ProductTypeAttributes;
			}
			set
			{
				this._ProductTypeAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
		
		private void attach_ProductTypeAttributes(ProductTypeAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_ProductTypeAttributes(ProductTypeAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[Table(Name="dbo.ProductTypeAttribute")]
	public partial class ProductTypeAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductTypeAttributeID;
		
		private int _ProductTypeID;
		
		private int _AttributeID;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductTypeAttributeIDChanging(int value);
    partial void OnProductTypeAttributeIDChanged();
    partial void OnProductTypeIDChanging(int value);
    partial void OnProductTypeIDChanged();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    #endregion
		
		public ProductTypeAttribute()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[Column(Storage="_ProductTypeAttributeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductTypeAttributeID
		{
			get
			{
				return this._ProductTypeAttributeID;
			}
			set
			{
				if ((this._ProductTypeAttributeID != value))
				{
					this.OnProductTypeAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeAttributeID = value;
					this.SendPropertyChanged("ProductTypeAttributeID");
					this.OnProductTypeAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductTypeID", DbType="Int NOT NULL")]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeID = value;
					this.SendPropertyChanged("ProductTypeID");
					this.OnProductTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ProductTypeAttribute_Attribute", Storage="_Attribute", ThisKey="AttributeID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.ProductTypeAttributes.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.ProductTypeAttributes.Add(this);
						this._AttributeID = value.AttributeID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[Association(Name="FK_ProductTypeAttribute_ProductType", Storage="_ProductType", ThisKey="ProductTypeID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.ProductTypeAttributes.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.ProductTypeAttributes.Add(this);
						this._ProductTypeID = value.ProductTypeID;
					}
					else
					{
						this._ProductTypeID = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.view_Product")]
	public partial class View_Product
	{
		
		private int _ProductID;
		
		private string _ProductName;
		
		private int _ProductTypeID;
		
		private string _ProductTypeName;
		
		private System.Nullable<int> _ParentProductTypeID;
		
		public View_Product()
		{
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this._ProductID = value;
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="VarChar(100)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[Column(Storage="_ProductTypeID", DbType="Int NOT NULL")]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					this._ProductTypeID = value;
				}
			}
		}
		
		[Column(Storage="_ProductTypeName", DbType="VarChar(100)")]
		public string ProductTypeName
		{
			get
			{
				return this._ProductTypeName;
			}
			set
			{
				if ((this._ProductTypeName != value))
				{
					this._ProductTypeName = value;
				}
			}
		}
		
		[Column(Storage="_ParentProductTypeID", DbType="Int")]
		public System.Nullable<int> ParentProductTypeID
		{
			get
			{
				return this._ParentProductTypeID;
			}
			set
			{
				if ((this._ParentProductTypeID != value))
				{
					this._ParentProductTypeID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.view_ProductAttribute")]
	public partial class View_ProductAttribute
	{
		
		private int _AttributeID;
		
		private int _ProductTypeID;
		
		private System.Nullable<int> _ParentAttributeID;
		
		private string _Name;
		
		private string _AttributeTypeName;
		
		private int _AttributeTypeID;
		
		public View_ProductAttribute()
		{
		}
		
		[Column(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					this._AttributeID = value;
				}
			}
		}
		
		[Column(Storage="_ProductTypeID", DbType="Int NOT NULL")]
		public int ProductTypeID
		{
			get
			{
				return this._ProductTypeID;
			}
			set
			{
				if ((this._ProductTypeID != value))
				{
					this._ProductTypeID = value;
				}
			}
		}
		
		[Column(Storage="_ParentAttributeID", DbType="Int")]
		public System.Nullable<int> ParentAttributeID
		{
			get
			{
				return this._ParentAttributeID;
			}
			set
			{
				if ((this._ParentAttributeID != value))
				{
					this._ParentAttributeID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_AttributeTypeName", DbType="VarChar(100)")]
		public string AttributeTypeName
		{
			get
			{
				return this._AttributeTypeName;
			}
			set
			{
				if ((this._AttributeTypeName != value))
				{
					this._AttributeTypeName = value;
				}
			}
		}
		
		[Column(Storage="_AttributeTypeID", DbType="Int NOT NULL")]
		public int AttributeTypeID
		{
			get
			{
				return this._AttributeTypeID;
			}
			set
			{
				if ((this._AttributeTypeID != value))
				{
					this._AttributeTypeID = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[Column(Storage="_Database", DbType="NVarChar(128)")]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(128)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
