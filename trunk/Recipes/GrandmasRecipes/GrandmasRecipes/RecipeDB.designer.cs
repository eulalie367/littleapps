#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrandmasRecipes
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Recipes")]
	public partial class RecipeDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCommonIngredient(CommonIngredient instance);
    partial void UpdateCommonIngredient(CommonIngredient instance);
    partial void DeleteCommonIngredient(CommonIngredient instance);
    partial void InsertStep(Step instance);
    partial void UpdateStep(Step instance);
    partial void DeleteStep(Step instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertMeasurementUnit(MeasurementUnit instance);
    partial void UpdateMeasurementUnit(MeasurementUnit instance);
    partial void DeleteMeasurementUnit(MeasurementUnit instance);
    partial void InsertRecipe(Recipe instance);
    partial void UpdateRecipe(Recipe instance);
    partial void DeleteRecipe(Recipe instance);
    partial void InsertSource(Source instance);
    partial void UpdateSource(Source instance);
    partial void DeleteSource(Source instance);
    #endregion
		
		public RecipeDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Recipes"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CommonIngredient> CommonIngredients
		{
			get
			{
				return this.GetTable<CommonIngredient>();
			}
		}
		
		public System.Data.Linq.Table<Step> Steps
		{
			get
			{
				return this.GetTable<Step>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<MeasurementUnit> MeasurementUnits
		{
			get
			{
				return this.GetTable<MeasurementUnit>();
			}
		}
		
		public System.Data.Linq.Table<Recipe> Recipes
		{
			get
			{
				return this.GetTable<Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Source> Sources
		{
			get
			{
				return this.GetTable<Source>();
			}
		}
	}
	
	[Table(Name="dbo.CommonIngredient")]
	public partial class CommonIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommonIngredientID;
		
		private string _Name;
		
		private string _CommonBrand;
		
		private EntitySet<Ingredient> _Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommonIngredientIDChanging(int value);
    partial void OnCommonIngredientIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommonBrandChanging(string value);
    partial void OnCommonBrandChanged();
    #endregion
		
		public CommonIngredient()
		{
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			OnCreated();
		}
		
		[Column(Storage="_CommonIngredientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommonIngredientID
		{
			get
			{
				return this._CommonIngredientID;
			}
			set
			{
				if ((this._CommonIngredientID != value))
				{
					this.OnCommonIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._CommonIngredientID = value;
					this.SendPropertyChanged("CommonIngredientID");
					this.OnCommonIngredientIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CommonBrand", DbType="VarChar(1000)")]
		public string CommonBrand
		{
			get
			{
				return this._CommonBrand;
			}
			set
			{
				if ((this._CommonBrand != value))
				{
					this.OnCommonBrandChanging(value);
					this.SendPropertyChanging();
					this._CommonBrand = value;
					this.SendPropertyChanged("CommonBrand");
					this.OnCommonBrandChanged();
				}
			}
		}
		
		[Association(Name="CommonIngredient_Ingredient", Storage="_Ingredients", ThisKey="CommonIngredientID", OtherKey="CommonIngredientID")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.CommonIngredient = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.CommonIngredient = null;
		}
	}
	
	[Table(Name="dbo.Steps")]
	public partial class Step : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StepsID;
		
		private int _StepOrder;
		
		private string _Instruction;
		
		private int _RecipeID;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStepsIDChanging(int value);
    partial void OnStepsIDChanged();
    partial void OnStepOrderChanging(int value);
    partial void OnStepOrderChanged();
    partial void OnInstructionChanging(string value);
    partial void OnInstructionChanged();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    #endregion
		
		public Step()
		{
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[Column(Storage="_StepsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StepsID
		{
			get
			{
				return this._StepsID;
			}
			set
			{
				if ((this._StepsID != value))
				{
					this.OnStepsIDChanging(value);
					this.SendPropertyChanging();
					this._StepsID = value;
					this.SendPropertyChanged("StepsID");
					this.OnStepsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StepOrder", DbType="Int NOT NULL")]
		public int StepOrder
		{
			get
			{
				return this._StepOrder;
			}
			set
			{
				if ((this._StepOrder != value))
				{
					this.OnStepOrderChanging(value);
					this.SendPropertyChanging();
					this._StepOrder = value;
					this.SendPropertyChanged("StepOrder");
					this.OnStepOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Instruction", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Instruction
		{
			get
			{
				return this._Instruction;
			}
			set
			{
				if ((this._Instruction != value))
				{
					this.OnInstructionChanging(value);
					this.SendPropertyChanging();
					this._Instruction = value;
					this.SendPropertyChanged("Instruction");
					this.OnInstructionChanged();
				}
			}
		}
		
		[Column(Storage="_RecipeID", DbType="Int NOT NULL")]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[Association(Name="Recipe_Step", Storage="_Recipe", ThisKey="RecipeID", OtherKey="RecipeID", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Steps.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Steps.Add(this);
						this._RecipeID = value.RecipeID;
					}
					else
					{
						this._RecipeID = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IngredientsID;
		
		private int _CommonIngredientID;
		
		private int _MeasurementUnitID;
		
		private double _Ammount;
		
		private int _RecipeID;
		
		private EntityRef<CommonIngredient> _CommonIngredient;
		
		private EntityRef<MeasurementUnit> _MeasurementUnit;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientsIDChanging(int value);
    partial void OnIngredientsIDChanged();
    partial void OnCommonIngredientIDChanging(int value);
    partial void OnCommonIngredientIDChanged();
    partial void OnMeasurementUnitIDChanging(int value);
    partial void OnMeasurementUnitIDChanged();
    partial void OnAmmountChanging(double value);
    partial void OnAmmountChanged();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    #endregion
		
		public Ingredient()
		{
			this._CommonIngredient = default(EntityRef<CommonIngredient>);
			this._MeasurementUnit = default(EntityRef<MeasurementUnit>);
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[Column(Storage="_IngredientsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IngredientsID
		{
			get
			{
				return this._IngredientsID;
			}
			set
			{
				if ((this._IngredientsID != value))
				{
					this.OnIngredientsIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientsID = value;
					this.SendPropertyChanged("IngredientsID");
					this.OnIngredientsIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommonIngredientID", DbType="Int NOT NULL")]
		public int CommonIngredientID
		{
			get
			{
				return this._CommonIngredientID;
			}
			set
			{
				if ((this._CommonIngredientID != value))
				{
					if (this._CommonIngredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommonIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._CommonIngredientID = value;
					this.SendPropertyChanged("CommonIngredientID");
					this.OnCommonIngredientIDChanged();
				}
			}
		}
		
		[Column(Storage="_MeasurementUnitID", DbType="Int NOT NULL")]
		public int MeasurementUnitID
		{
			get
			{
				return this._MeasurementUnitID;
			}
			set
			{
				if ((this._MeasurementUnitID != value))
				{
					if (this._MeasurementUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasurementUnitIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementUnitID = value;
					this.SendPropertyChanged("MeasurementUnitID");
					this.OnMeasurementUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ammount", DbType="Float NOT NULL")]
		public double Ammount
		{
			get
			{
				return this._Ammount;
			}
			set
			{
				if ((this._Ammount != value))
				{
					this.OnAmmountChanging(value);
					this.SendPropertyChanging();
					this._Ammount = value;
					this.SendPropertyChanged("Ammount");
					this.OnAmmountChanged();
				}
			}
		}
		
		[Column(Storage="_RecipeID", DbType="Int NOT NULL")]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[Association(Name="CommonIngredient_Ingredient", Storage="_CommonIngredient", ThisKey="CommonIngredientID", OtherKey="CommonIngredientID", IsForeignKey=true)]
		public CommonIngredient CommonIngredient
		{
			get
			{
				return this._CommonIngredient.Entity;
			}
			set
			{
				CommonIngredient previousValue = this._CommonIngredient.Entity;
				if (((previousValue != value) 
							|| (this._CommonIngredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommonIngredient.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._CommonIngredient.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._CommonIngredientID = value.CommonIngredientID;
					}
					else
					{
						this._CommonIngredientID = default(int);
					}
					this.SendPropertyChanged("CommonIngredient");
				}
			}
		}
		
		[Association(Name="MeasurementUnit_Ingredient", Storage="_MeasurementUnit", ThisKey="MeasurementUnitID", OtherKey="MeasurementUnitID", IsForeignKey=true)]
		public MeasurementUnit MeasurementUnit
		{
			get
			{
				return this._MeasurementUnit.Entity;
			}
			set
			{
				MeasurementUnit previousValue = this._MeasurementUnit.Entity;
				if (((previousValue != value) 
							|| (this._MeasurementUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasurementUnit.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._MeasurementUnit.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._MeasurementUnitID = value.MeasurementUnitID;
					}
					else
					{
						this._MeasurementUnitID = default(int);
					}
					this.SendPropertyChanged("MeasurementUnit");
				}
			}
		}
		
		[Association(Name="Recipe_Ingredient", Storage="_Recipe", ThisKey="RecipeID", OtherKey="RecipeID", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._RecipeID = value.RecipeID;
					}
					else
					{
						this._RecipeID = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MeasurementUnit")]
	public partial class MeasurementUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasurementUnitID;
		
		private string _Name;
		
		private int _SSIUnit;
		
		private double _SSIConversion;
		
		private EntitySet<Ingredient> _Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasurementUnitIDChanging(int value);
    partial void OnMeasurementUnitIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSSIUnitChanging(int value);
    partial void OnSSIUnitChanged();
    partial void OnSSIConversionChanging(double value);
    partial void OnSSIConversionChanged();
    #endregion
		
		public MeasurementUnit()
		{
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			OnCreated();
		}
		
		[Column(Storage="_MeasurementUnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeasurementUnitID
		{
			get
			{
				return this._MeasurementUnitID;
			}
			set
			{
				if ((this._MeasurementUnitID != value))
				{
					this.OnMeasurementUnitIDChanging(value);
					this.SendPropertyChanging();
					this._MeasurementUnitID = value;
					this.SendPropertyChanged("MeasurementUnitID");
					this.OnMeasurementUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SSIUnit", DbType="Int NOT NULL")]
		public int SSIUnit
		{
			get
			{
				return this._SSIUnit;
			}
			set
			{
				if ((this._SSIUnit != value))
				{
					this.OnSSIUnitChanging(value);
					this.SendPropertyChanging();
					this._SSIUnit = value;
					this.SendPropertyChanged("SSIUnit");
					this.OnSSIUnitChanged();
				}
			}
		}
		
		[Column(Storage="_SSIConversion", DbType="Float NOT NULL")]
		public double SSIConversion
		{
			get
			{
				return this._SSIConversion;
			}
			set
			{
				if ((this._SSIConversion != value))
				{
					this.OnSSIConversionChanging(value);
					this.SendPropertyChanging();
					this._SSIConversion = value;
					this.SendPropertyChanged("SSIConversion");
					this.OnSSIConversionChanged();
				}
			}
		}
		
		[Association(Name="MeasurementUnit_Ingredient", Storage="_Ingredients", ThisKey="MeasurementUnitID", OtherKey="MeasurementUnitID")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementUnit = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementUnit = null;
		}
	}
	
	[Table(Name="dbo.Recipe")]
	public partial class Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipeID;
		
		private int _SoruceID;
		
		private string _Name;
		
		private EntitySet<Step> _Steps;
		
		private EntitySet<Ingredient> _Ingredients;
		
		private EntityRef<Source> _Source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    partial void OnSoruceIDChanging(int value);
    partial void OnSoruceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Recipe()
		{
			this._Steps = new EntitySet<Step>(new Action<Step>(this.attach_Steps), new Action<Step>(this.detach_Steps));
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			this._Source = default(EntityRef<Source>);
			OnCreated();
		}
		
		[Column(Storage="_RecipeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SoruceID", DbType="Int NOT NULL")]
		public int SoruceID
		{
			get
			{
				return this._SoruceID;
			}
			set
			{
				if ((this._SoruceID != value))
				{
					if (this._Source.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoruceIDChanging(value);
					this.SendPropertyChanging();
					this._SoruceID = value;
					this.SendPropertyChanged("SoruceID");
					this.OnSoruceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Recipe_Step", Storage="_Steps", ThisKey="RecipeID", OtherKey="RecipeID")]
		public EntitySet<Step> Steps
		{
			get
			{
				return this._Steps;
			}
			set
			{
				this._Steps.Assign(value);
			}
		}
		
		[Association(Name="Recipe_Ingredient", Storage="_Ingredients", ThisKey="RecipeID", OtherKey="RecipeID")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		[Association(Name="Source_Recipe", Storage="_Source", ThisKey="SoruceID", OtherKey="SourceID", IsForeignKey=true)]
		public Source Source
		{
			get
			{
				return this._Source.Entity;
			}
			set
			{
				Source previousValue = this._Source.Entity;
				if (((previousValue != value) 
							|| (this._Source.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Source.Entity = null;
						previousValue.Recipes.Remove(this);
					}
					this._Source.Entity = value;
					if ((value != null))
					{
						value.Recipes.Add(this);
						this._SoruceID = value.SourceID;
					}
					else
					{
						this._SoruceID = default(int);
					}
					this.SendPropertyChanged("Source");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Steps(Step entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Steps(Step entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
	}
	
	[Table(Name="dbo.Source")]
	public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceID;
		
		private string _Name;
		
		private EntitySet<Recipe> _Recipes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Source()
		{
			this._Recipes = new EntitySet<Recipe>(new Action<Recipe>(this.attach_Recipes), new Action<Recipe>(this.detach_Recipes));
			OnCreated();
		}
		
		[Column(Storage="_SourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Source_Recipe", Storage="_Recipes", ThisKey="SourceID", OtherKey="SoruceID")]
		public EntitySet<Recipe> Recipes
		{
			get
			{
				return this._Recipes;
			}
			set
			{
				this._Recipes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recipes(Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Source = this;
		}
		
		private void detach_Recipes(Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Source = null;
		}
	}
}
#pragma warning restore 1591
