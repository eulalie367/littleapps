#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockMarket
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Stocks : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyImport(CompanyImport instance);
    partial void UpdateCompanyImport(CompanyImport instance);
    partial void DeleteCompanyImport(CompanyImport instance);
    partial void InsertCompanyStats(CompanyStats instance);
    partial void UpdateCompanyStats(CompanyStats instance);
    partial void DeleteCompanyStats(CompanyStats instance);
    partial void InsertHistoricacal2(Historicacal2 instance);
    partial void UpdateHistoricacal2(Historicacal2 instance);
    partial void DeleteHistoricacal2(Historicacal2 instance);
    partial void InsertHistoricalquoteholding(Historicalquoteholding instance);
    partial void UpdateHistoricalquoteholding(Historicalquoteholding instance);
    partial void DeleteHistoricalquoteholding(Historicalquoteholding instance);
    partial void InsertIndustry(Industry instance);
    partial void UpdateIndustry(Industry instance);
    partial void DeleteIndustry(Industry instance);
    partial void InsertPortFolioEntry(PortFolioEntry instance);
    partial void UpdatePortFolioEntry(PortFolioEntry instance);
    partial void DeletePortFolioEntry(PortFolioEntry instance);
    partial void InsertSector(Sector instance);
    partial void UpdateSector(Sector instance);
    partial void DeleteSector(Sector instance);
    #endregion
		
		public Stocks(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Stocks(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Stocks(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Stocks(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Company
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyImport> CompanyImport
		{
			get
			{
				return this.GetTable<CompanyImport>();
			}
		}
		
		public System.Data.Linq.Table<CompanyStats> CompanyStats
		{
			get
			{
				return this.GetTable<CompanyStats>();
			}
		}
		
		public System.Data.Linq.Table<Historicacal2> Historicacal2
		{
			get
			{
				return this.GetTable<Historicacal2>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalQuote> HistoricalQuote
		{
			get
			{
				return this.GetTable<HistoricalQuote>();
			}
		}
		
		public System.Data.Linq.Table<Historicalquoteholding> Historicalquoteholding
		{
			get
			{
				return this.GetTable<Historicalquoteholding>();
			}
		}
		
		public System.Data.Linq.Table<Industry> Industry
		{
			get
			{
				return this.GetTable<Industry>();
			}
		}
		
		public System.Data.Linq.Table<PortFolioEntry> PortFolioEntry
		{
			get
			{
				return this.GetTable<PortFolioEntry>();
			}
		}
		
		public System.Data.Linq.Table<Sector> Sector
		{
			get
			{
				return this.GetTable<Sector>();
			}
		}
	}
	
	[Table(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _Ticker;
		
		private System.Nullable<int> _IndustryID;
		
		private string _Title;
		
		private string _Exchange;
		
		private EntityRef<Industry> _Industry;
		
		private EntitySet<CompanyStats> _CompanyStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnIndustryIDChanging(System.Nullable<int> value);
    partial void OnIndustryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnExchangeChanging(string value);
    partial void OnExchangeChanged();
    #endregion
		
		public Company()
		{
			this._Industry = default(EntityRef<Industry>);
			this._CompanyStats = new EntitySet<CompanyStats>(new Action<CompanyStats>(this.attach_CompanyStats), new Action<CompanyStats>(this.detach_CompanyStats));
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[Column(Storage="_IndustryID", DbType="Int")]
		public System.Nullable<int> IndustryID
		{
			get
			{
				return this._IndustryID;
			}
			set
			{
				if ((this._IndustryID != value))
				{
					if (this._Industry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndustryIDChanging(value);
					this.SendPropertyChanging();
					this._IndustryID = value;
					this.SendPropertyChanged("IndustryID");
					this.OnIndustryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(1000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Exchange", DbType="VarChar(20)")]
		public string Exchange
		{
			get
			{
				return this._Exchange;
			}
			set
			{
				if ((this._Exchange != value))
				{
					this.OnExchangeChanging(value);
					this.SendPropertyChanging();
					this._Exchange = value;
					this.SendPropertyChanged("Exchange");
					this.OnExchangeChanged();
				}
			}
		}
		
		[Association(Name="FK_Company_Industry", Storage="_Industry", ThisKey="IndustryID", IsForeignKey=true)]
		public Industry Industry
		{
			get
			{
				return this._Industry.Entity;
			}
			set
			{
				Industry previousValue = this._Industry.Entity;
				if (((previousValue != value) 
							|| (this._Industry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Industry.Entity = null;
						previousValue.Company.Remove(this);
					}
					this._Industry.Entity = value;
					if ((value != null))
					{
						value.Company.Add(this);
						this._IndustryID = value.IndustryID;
					}
					else
					{
						this._IndustryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Industry");
				}
			}
		}
		
		[Association(Name="FK_CompanyStats_Company", Storage="_CompanyStats", OtherKey="CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<CompanyStats> CompanyStats
		{
			get
			{
				return this._CompanyStats;
			}
			set
			{
				this._CompanyStats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyStats(CompanyStats entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyStats(CompanyStats entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[Table(Name="dbo.CompanyImport")]
	public partial class CompanyImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private System.Nullable<int> _IndustryID;
		
		private string _Name;
		
		private System.Nullable<int> _Earnings;
		
		private System.Nullable<double> _LastClose;
		
		private System.Nullable<int> _CashFlow;
		
		private System.Nullable<int> _BookValue;
		
		private System.Nullable<double> _DividendPercent;
		
		private System.Nullable<double> _MarketCapMillions;
		
		private System.Nullable<double> _ProfitMargin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnIndustryIDChanging(System.Nullable<int> value);
    partial void OnIndustryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEarningsChanging(System.Nullable<int> value);
    partial void OnEarningsChanged();
    partial void OnLastCloseChanging(System.Nullable<double> value);
    partial void OnLastCloseChanged();
    partial void OnCashFlowChanging(System.Nullable<int> value);
    partial void OnCashFlowChanged();
    partial void OnBookValueChanging(System.Nullable<int> value);
    partial void OnBookValueChanged();
    partial void OnDividendPercentChanging(System.Nullable<double> value);
    partial void OnDividendPercentChanged();
    partial void OnMarketCapMillionsChanging(System.Nullable<double> value);
    partial void OnMarketCapMillionsChanged();
    partial void OnProfitMarginChanging(System.Nullable<double> value);
    partial void OnProfitMarginChanged();
    #endregion
		
		public CompanyImport()
		{
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_IndustryID", DbType="Int")]
		public System.Nullable<int> IndustryID
		{
			get
			{
				return this._IndustryID;
			}
			set
			{
				if ((this._IndustryID != value))
				{
					this.OnIndustryIDChanging(value);
					this.SendPropertyChanging();
					this._IndustryID = value;
					this.SendPropertyChanged("IndustryID");
					this.OnIndustryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Earnings", DbType="Int")]
		public System.Nullable<int> Earnings
		{
			get
			{
				return this._Earnings;
			}
			set
			{
				if ((this._Earnings != value))
				{
					this.OnEarningsChanging(value);
					this.SendPropertyChanging();
					this._Earnings = value;
					this.SendPropertyChanged("Earnings");
					this.OnEarningsChanged();
				}
			}
		}
		
		[Column(Storage="_LastClose", DbType="Float")]
		public System.Nullable<double> LastClose
		{
			get
			{
				return this._LastClose;
			}
			set
			{
				if ((this._LastClose != value))
				{
					this.OnLastCloseChanging(value);
					this.SendPropertyChanging();
					this._LastClose = value;
					this.SendPropertyChanged("LastClose");
					this.OnLastCloseChanged();
				}
			}
		}
		
		[Column(Storage="_CashFlow", DbType="Int")]
		public System.Nullable<int> CashFlow
		{
			get
			{
				return this._CashFlow;
			}
			set
			{
				if ((this._CashFlow != value))
				{
					this.OnCashFlowChanging(value);
					this.SendPropertyChanging();
					this._CashFlow = value;
					this.SendPropertyChanged("CashFlow");
					this.OnCashFlowChanged();
				}
			}
		}
		
		[Column(Storage="_BookValue", DbType="Int")]
		public System.Nullable<int> BookValue
		{
			get
			{
				return this._BookValue;
			}
			set
			{
				if ((this._BookValue != value))
				{
					this.OnBookValueChanging(value);
					this.SendPropertyChanging();
					this._BookValue = value;
					this.SendPropertyChanged("BookValue");
					this.OnBookValueChanged();
				}
			}
		}
		
		[Column(Storage="_DividendPercent", DbType="Float")]
		public System.Nullable<double> DividendPercent
		{
			get
			{
				return this._DividendPercent;
			}
			set
			{
				if ((this._DividendPercent != value))
				{
					this.OnDividendPercentChanging(value);
					this.SendPropertyChanging();
					this._DividendPercent = value;
					this.SendPropertyChanged("DividendPercent");
					this.OnDividendPercentChanged();
				}
			}
		}
		
		[Column(Storage="_MarketCapMillions", DbType="Float")]
		public System.Nullable<double> MarketCapMillions
		{
			get
			{
				return this._MarketCapMillions;
			}
			set
			{
				if ((this._MarketCapMillions != value))
				{
					this.OnMarketCapMillionsChanging(value);
					this.SendPropertyChanging();
					this._MarketCapMillions = value;
					this.SendPropertyChanged("MarketCapMillions");
					this.OnMarketCapMillionsChanged();
				}
			}
		}
		
		[Column(Storage="_ProfitMargin", DbType="Float")]
		public System.Nullable<double> ProfitMargin
		{
			get
			{
				return this._ProfitMargin;
			}
			set
			{
				if ((this._ProfitMargin != value))
				{
					this.OnProfitMarginChanging(value);
					this.SendPropertyChanging();
					this._ProfitMargin = value;
					this.SendPropertyChanged("ProfitMargin");
					this.OnProfitMarginChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CompanyStats")]
	public partial class CompanyStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyStatsID;
		
		private int _CompanyID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _Earnings;
		
		private System.Nullable<int> _CashFlow;
		
		private System.Nullable<int> _BookValue;
		
		private System.Nullable<double> _ProfitMargin;
		
		private System.Nullable<double> _CurrentRatioYear;
		
		private System.Nullable<double> _DividendRecentQuarter;
		
		private System.Nullable<double> _High52Week;
		
		private System.Nullable<double> _Low52Week;
		
		private System.Nullable<double> _MarketCap;
		
		private System.Nullable<double> _PE;
		
		private System.Nullable<double> _PriceSales;
		
		private System.Nullable<double> _LastPrice;
		
		private System.Nullable<double> _Volume;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyStatsIDChanging(int value);
    partial void OnCompanyStatsIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnEarningsChanging(System.Nullable<int> value);
    partial void OnEarningsChanged();
    partial void OnCashFlowChanging(System.Nullable<int> value);
    partial void OnCashFlowChanged();
    partial void OnBookValueChanging(System.Nullable<int> value);
    partial void OnBookValueChanged();
    partial void OnProfitMarginChanging(System.Nullable<double> value);
    partial void OnProfitMarginChanged();
    partial void OnCurrentRatioYearChanging(System.Nullable<double> value);
    partial void OnCurrentRatioYearChanged();
    partial void OnDividendRecentQuarterChanging(System.Nullable<double> value);
    partial void OnDividendRecentQuarterChanged();
    partial void OnHigh52WeekChanging(System.Nullable<double> value);
    partial void OnHigh52WeekChanged();
    partial void OnLow52WeekChanging(System.Nullable<double> value);
    partial void OnLow52WeekChanged();
    partial void OnMarketCapChanging(System.Nullable<double> value);
    partial void OnMarketCapChanged();
    partial void OnPEChanging(System.Nullable<double> value);
    partial void OnPEChanged();
    partial void OnPriceSalesChanging(System.Nullable<double> value);
    partial void OnPriceSalesChanged();
    partial void OnLastPriceChanging(System.Nullable<double> value);
    partial void OnLastPriceChanged();
    partial void OnVolumeChanging(System.Nullable<double> value);
    partial void OnVolumeChanged();
    #endregion
		
		public CompanyStats()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyStatsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyStatsID
		{
			get
			{
				return this._CompanyStatsID;
			}
			set
			{
				if ((this._CompanyStatsID != value))
				{
					this.OnCompanyStatsIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyStatsID = value;
					this.SendPropertyChanged("CompanyStatsID");
					this.OnCompanyStatsIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Earnings", DbType="Int")]
		public System.Nullable<int> Earnings
		{
			get
			{
				return this._Earnings;
			}
			set
			{
				if ((this._Earnings != value))
				{
					this.OnEarningsChanging(value);
					this.SendPropertyChanging();
					this._Earnings = value;
					this.SendPropertyChanged("Earnings");
					this.OnEarningsChanged();
				}
			}
		}
		
		[Column(Storage="_CashFlow", DbType="Int")]
		public System.Nullable<int> CashFlow
		{
			get
			{
				return this._CashFlow;
			}
			set
			{
				if ((this._CashFlow != value))
				{
					this.OnCashFlowChanging(value);
					this.SendPropertyChanging();
					this._CashFlow = value;
					this.SendPropertyChanged("CashFlow");
					this.OnCashFlowChanged();
				}
			}
		}
		
		[Column(Storage="_BookValue", DbType="Int")]
		public System.Nullable<int> BookValue
		{
			get
			{
				return this._BookValue;
			}
			set
			{
				if ((this._BookValue != value))
				{
					this.OnBookValueChanging(value);
					this.SendPropertyChanging();
					this._BookValue = value;
					this.SendPropertyChanged("BookValue");
					this.OnBookValueChanged();
				}
			}
		}
		
		[Column(Storage="_ProfitMargin", DbType="Float")]
		public System.Nullable<double> ProfitMargin
		{
			get
			{
				return this._ProfitMargin;
			}
			set
			{
				if ((this._ProfitMargin != value))
				{
					this.OnProfitMarginChanging(value);
					this.SendPropertyChanging();
					this._ProfitMargin = value;
					this.SendPropertyChanged("ProfitMargin");
					this.OnProfitMarginChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentRatioYear", DbType="Float")]
		public System.Nullable<double> CurrentRatioYear
		{
			get
			{
				return this._CurrentRatioYear;
			}
			set
			{
				if ((this._CurrentRatioYear != value))
				{
					this.OnCurrentRatioYearChanging(value);
					this.SendPropertyChanging();
					this._CurrentRatioYear = value;
					this.SendPropertyChanged("CurrentRatioYear");
					this.OnCurrentRatioYearChanged();
				}
			}
		}
		
		[Column(Storage="_DividendRecentQuarter", DbType="Float")]
		public System.Nullable<double> DividendRecentQuarter
		{
			get
			{
				return this._DividendRecentQuarter;
			}
			set
			{
				if ((this._DividendRecentQuarter != value))
				{
					this.OnDividendRecentQuarterChanging(value);
					this.SendPropertyChanging();
					this._DividendRecentQuarter = value;
					this.SendPropertyChanged("DividendRecentQuarter");
					this.OnDividendRecentQuarterChanged();
				}
			}
		}
		
		[Column(Storage="_High52Week", DbType="Float")]
		public System.Nullable<double> High52Week
		{
			get
			{
				return this._High52Week;
			}
			set
			{
				if ((this._High52Week != value))
				{
					this.OnHigh52WeekChanging(value);
					this.SendPropertyChanging();
					this._High52Week = value;
					this.SendPropertyChanged("High52Week");
					this.OnHigh52WeekChanged();
				}
			}
		}
		
		[Column(Storage="_Low52Week", DbType="Float")]
		public System.Nullable<double> Low52Week
		{
			get
			{
				return this._Low52Week;
			}
			set
			{
				if ((this._Low52Week != value))
				{
					this.OnLow52WeekChanging(value);
					this.SendPropertyChanging();
					this._Low52Week = value;
					this.SendPropertyChanged("Low52Week");
					this.OnLow52WeekChanged();
				}
			}
		}
		
		[Column(Storage="_MarketCap", DbType="Float")]
		public System.Nullable<double> MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this.OnMarketCapChanging(value);
					this.SendPropertyChanging();
					this._MarketCap = value;
					this.SendPropertyChanged("MarketCap");
					this.OnMarketCapChanged();
				}
			}
		}
		
		[Column(Storage="_PE", DbType="Float")]
		public System.Nullable<double> PE
		{
			get
			{
				return this._PE;
			}
			set
			{
				if ((this._PE != value))
				{
					this.OnPEChanging(value);
					this.SendPropertyChanging();
					this._PE = value;
					this.SendPropertyChanged("PE");
					this.OnPEChanged();
				}
			}
		}
		
		[Column(Storage="_PriceSales", DbType="Float")]
		public System.Nullable<double> PriceSales
		{
			get
			{
				return this._PriceSales;
			}
			set
			{
				if ((this._PriceSales != value))
				{
					this.OnPriceSalesChanging(value);
					this.SendPropertyChanging();
					this._PriceSales = value;
					this.SendPropertyChanged("PriceSales");
					this.OnPriceSalesChanged();
				}
			}
		}
		
		[Column(Storage="_LastPrice", DbType="Float")]
		public System.Nullable<double> LastPrice
		{
			get
			{
				return this._LastPrice;
			}
			set
			{
				if ((this._LastPrice != value))
				{
					this.OnLastPriceChanging(value);
					this.SendPropertyChanging();
					this._LastPrice = value;
					this.SendPropertyChanged("LastPrice");
					this.OnLastPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Float")]
		public System.Nullable<double> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Association(Name="FK_CompanyStats_Company", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyStats.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyStats.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.historicacal2")]
	public partial class Historicacal2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Historical2ID;
		
		private int _HistoricalQuoteID;
		
		private string _Ticker;
		
		private double _LastPrice;
		
		private System.Nullable<double> _OpenPrice;
		
		private System.Nullable<double> _HighPrice;
		
		private System.Nullable<double> _LowPrice;
		
		private System.Nullable<int> _Volume;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistorical2IDChanging(int value);
    partial void OnHistorical2IDChanged();
    partial void OnHistoricalQuoteIDChanging(int value);
    partial void OnHistoricalQuoteIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnLastPriceChanging(double value);
    partial void OnLastPriceChanged();
    partial void OnOpenPriceChanging(System.Nullable<double> value);
    partial void OnOpenPriceChanged();
    partial void OnHighPriceChanging(System.Nullable<double> value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(System.Nullable<double> value);
    partial void OnLowPriceChanged();
    partial void OnVolumeChanging(System.Nullable<int> value);
    partial void OnVolumeChanged();
    #endregion
		
		public Historicacal2()
		{
			OnCreated();
		}
		
		[Column(Storage="_Historical2ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Historical2ID
		{
			get
			{
				return this._Historical2ID;
			}
			set
			{
				if ((this._Historical2ID != value))
				{
					this.OnHistorical2IDChanging(value);
					this.SendPropertyChanging();
					this._Historical2ID = value;
					this.SendPropertyChanged("Historical2ID");
					this.OnHistorical2IDChanged();
				}
			}
		}
		
		[Column(Storage="_HistoricalQuoteID", DbType="Int NOT NULL")]
		public int HistoricalQuoteID
		{
			get
			{
				return this._HistoricalQuoteID;
			}
			set
			{
				if ((this._HistoricalQuoteID != value))
				{
					this.OnHistoricalQuoteIDChanging(value);
					this.SendPropertyChanging();
					this._HistoricalQuoteID = value;
					this.SendPropertyChanged("HistoricalQuoteID");
					this.OnHistoricalQuoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ticker", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[Column(Storage="_LastPrice", DbType="Float NOT NULL")]
		public double LastPrice
		{
			get
			{
				return this._LastPrice;
			}
			set
			{
				if ((this._LastPrice != value))
				{
					this.OnLastPriceChanging(value);
					this.SendPropertyChanging();
					this._LastPrice = value;
					this.SendPropertyChanged("LastPrice");
					this.OnLastPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OpenPrice", DbType="Float")]
		public System.Nullable<double> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[Column(Storage="_HighPrice", DbType="Float")]
		public System.Nullable<double> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[Column(Storage="_LowPrice", DbType="Float")]
		public System.Nullable<double> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Int")]
		public System.Nullable<int> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HistoricalQuote")]
	public partial class HistoricalQuote
	{
		
		private string _Ticker;
		
		private double _LastPrice;
		
		private System.DateTime _LastTime;
		
		private System.Nullable<double> _PriceChange;
		
		private System.Nullable<double> _OpenPrice;
		
		private System.Nullable<double> _HighPrice;
		
		private System.Nullable<double> _LowPrice;
		
		private System.Nullable<int> _Volume;
		
		public HistoricalQuote()
		{
		}
		
		[Column(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this._Ticker = value;
				}
			}
		}
		
		[Column(Storage="_LastPrice", DbType="Float NOT NULL")]
		public double LastPrice
		{
			get
			{
				return this._LastPrice;
			}
			set
			{
				if ((this._LastPrice != value))
				{
					this._LastPrice = value;
				}
			}
		}
		
		[Column(Storage="_LastTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastTime
		{
			get
			{
				return this._LastTime;
			}
			set
			{
				if ((this._LastTime != value))
				{
					this._LastTime = value;
				}
			}
		}
		
		[Column(Storage="_PriceChange", DbType="Float")]
		public System.Nullable<double> PriceChange
		{
			get
			{
				return this._PriceChange;
			}
			set
			{
				if ((this._PriceChange != value))
				{
					this._PriceChange = value;
				}
			}
		}
		
		[Column(Storage="_OpenPrice", DbType="Float")]
		public System.Nullable<double> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this._OpenPrice = value;
				}
			}
		}
		
		[Column(Storage="_HighPrice", DbType="Float")]
		public System.Nullable<double> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this._HighPrice = value;
				}
			}
		}
		
		[Column(Storage="_LowPrice", DbType="Float")]
		public System.Nullable<double> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this._LowPrice = value;
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="Int")]
		public System.Nullable<int> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.historicalquoteholding")]
	public partial class Historicalquoteholding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Historicalquoteid;
		
		private System.DateTime _LastTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoricalquoteidChanging(int value);
    partial void OnHistoricalquoteidChanged();
    partial void OnLastTimeChanging(System.DateTime value);
    partial void OnLastTimeChanged();
    #endregion
		
		public Historicalquoteholding()
		{
			OnCreated();
		}
		
		[Column(Name="historicalquoteid", Storage="_Historicalquoteid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Historicalquoteid
		{
			get
			{
				return this._Historicalquoteid;
			}
			set
			{
				if ((this._Historicalquoteid != value))
				{
					this.OnHistoricalquoteidChanging(value);
					this.SendPropertyChanging();
					this._Historicalquoteid = value;
					this.SendPropertyChanged("Historicalquoteid");
					this.OnHistoricalquoteidChanged();
				}
			}
		}
		
		[Column(Storage="_LastTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastTime
		{
			get
			{
				return this._LastTime;
			}
			set
			{
				if ((this._LastTime != value))
				{
					this.OnLastTimeChanging(value);
					this.SendPropertyChanging();
					this._LastTime = value;
					this.SendPropertyChanged("LastTime");
					this.OnLastTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Industry")]
	public partial class Industry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndustryID;
		
		private System.Nullable<int> _SectorID;
		
		private string _Name;
		
		private EntitySet<Company> _Company;
		
		private EntityRef<Sector> _Sector;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndustryIDChanging(int value);
    partial void OnIndustryIDChanged();
    partial void OnSectorIDChanging(System.Nullable<int> value);
    partial void OnSectorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Industry()
		{
			this._Company = new EntitySet<Company>(new Action<Company>(this.attach_Company), new Action<Company>(this.detach_Company));
			this._Sector = default(EntityRef<Sector>);
			OnCreated();
		}
		
		[Column(Storage="_IndustryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndustryID
		{
			get
			{
				return this._IndustryID;
			}
			set
			{
				if ((this._IndustryID != value))
				{
					this.OnIndustryIDChanging(value);
					this.SendPropertyChanging();
					this._IndustryID = value;
					this.SendPropertyChanged("IndustryID");
					this.OnIndustryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectorID", DbType="Int")]
		public System.Nullable<int> SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._Sector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Company_Industry", Storage="_Company", OtherKey="IndustryID", DeleteRule="NO ACTION")]
		public EntitySet<Company> Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				this._Company.Assign(value);
			}
		}
		
		[Association(Name="FK_Industry_Sector", Storage="_Sector", ThisKey="SectorID", IsForeignKey=true)]
		public Sector Sector
		{
			get
			{
				return this._Sector.Entity;
			}
			set
			{
				Sector previousValue = this._Sector.Entity;
				if (((previousValue != value) 
							|| (this._Sector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sector.Entity = null;
						previousValue.Industry.Remove(this);
					}
					this._Sector.Entity = value;
					if ((value != null))
					{
						value.Industry.Add(this);
						this._SectorID = value.SectorID;
					}
					else
					{
						this._SectorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.Industry = this;
		}
		
		private void detach_Company(Company entity)
		{
			this.SendPropertyChanging();
			entity.Industry = null;
		}
	}
	
	[Table(Name="dbo.PortFolioEntry")]
	public partial class PortFolioEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PortFolioEntryID;
		
		private string _Ticker;
		
		private System.Nullable<int> _Shares;
		
		private System.Nullable<double> _PurchasePrice;
		
		private System.Nullable<double> _Commision;
		
		private System.Nullable<double> _CostBasis;
		
		private System.Nullable<double> _CostBasisPerShare;
		
		private System.Nullable<System.DateTime> _PurchaseDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortFolioEntryIDChanging(int value);
    partial void OnPortFolioEntryIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnSharesChanging(System.Nullable<int> value);
    partial void OnSharesChanged();
    partial void OnPurchasePriceChanging(System.Nullable<double> value);
    partial void OnPurchasePriceChanged();
    partial void OnCommisionChanging(System.Nullable<double> value);
    partial void OnCommisionChanged();
    partial void OnCostBasisChanging(System.Nullable<double> value);
    partial void OnCostBasisChanged();
    partial void OnCostBasisPerShareChanging(System.Nullable<double> value);
    partial void OnCostBasisPerShareChanged();
    partial void OnPurchaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPurchaseDateChanged();
    #endregion
		
		public PortFolioEntry()
		{
			OnCreated();
		}
		
		[Column(Storage="_PortFolioEntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PortFolioEntryID
		{
			get
			{
				return this._PortFolioEntryID;
			}
			set
			{
				if ((this._PortFolioEntryID != value))
				{
					this.OnPortFolioEntryIDChanging(value);
					this.SendPropertyChanging();
					this._PortFolioEntryID = value;
					this.SendPropertyChanged("PortFolioEntryID");
					this.OnPortFolioEntryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ticker", DbType="VarChar(10)")]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[Column(Storage="_Shares", DbType="Int")]
		public System.Nullable<int> Shares
		{
			get
			{
				return this._Shares;
			}
			set
			{
				if ((this._Shares != value))
				{
					this.OnSharesChanging(value);
					this.SendPropertyChanging();
					this._Shares = value;
					this.SendPropertyChanged("Shares");
					this.OnSharesChanged();
				}
			}
		}
		
		[Column(Storage="_PurchasePrice", DbType="Float")]
		public System.Nullable<double> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_Commision", DbType="Float")]
		public System.Nullable<double> Commision
		{
			get
			{
				return this._Commision;
			}
			set
			{
				if ((this._Commision != value))
				{
					this.OnCommisionChanging(value);
					this.SendPropertyChanging();
					this._Commision = value;
					this.SendPropertyChanged("Commision");
					this.OnCommisionChanged();
				}
			}
		}
		
		[Column(Storage="_CostBasis", DbType="Float")]
		public System.Nullable<double> CostBasis
		{
			get
			{
				return this._CostBasis;
			}
			set
			{
				if ((this._CostBasis != value))
				{
					this.OnCostBasisChanging(value);
					this.SendPropertyChanging();
					this._CostBasis = value;
					this.SendPropertyChanged("CostBasis");
					this.OnCostBasisChanged();
				}
			}
		}
		
		[Column(Storage="_CostBasisPerShare", DbType="Float")]
		public System.Nullable<double> CostBasisPerShare
		{
			get
			{
				return this._CostBasisPerShare;
			}
			set
			{
				if ((this._CostBasisPerShare != value))
				{
					this.OnCostBasisPerShareChanging(value);
					this.SendPropertyChanging();
					this._CostBasisPerShare = value;
					this.SendPropertyChanged("CostBasisPerShare");
					this.OnCostBasisPerShareChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if ((this._PurchaseDate != value))
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sector")]
	public partial class Sector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectorID;
		
		private string _Name;
		
		private EntitySet<Industry> _Industry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sector()
		{
			this._Industry = new EntitySet<Industry>(new Action<Industry>(this.attach_Industry), new Action<Industry>(this.detach_Industry));
			OnCreated();
		}
		
		[Column(Storage="_SectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Industry_Sector", Storage="_Industry", OtherKey="SectorID", DeleteRule="NO ACTION")]
		public EntitySet<Industry> Industry
		{
			get
			{
				return this._Industry;
			}
			set
			{
				this._Industry.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Industry(Industry entity)
		{
			this.SendPropertyChanging();
			entity.Sector = this;
		}
		
		private void detach_Industry(Industry entity)
		{
			this.SendPropertyChanging();
			entity.Sector = null;
		}
	}
}
#pragma warning restore 1591
