#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Contractor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Contractor")]
	public partial class dcContractor : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerSource(CustomerSource instance);
    partial void UpdateCustomerSource(CustomerSource instance);
    partial void DeleteCustomerSource(CustomerSource instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertJobType(JobType instance);
    partial void UpdateJobType(JobType instance);
    partial void DeleteJobType(JobType instance);
    partial void InsertLeadSource(LeadSource instance);
    partial void UpdateLeadSource(LeadSource instance);
    partial void DeleteLeadSource(LeadSource instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertSalesPerson(SalesPerson instance);
    partial void UpdateSalesPerson(SalesPerson instance);
    partial void DeleteSalesPerson(SalesPerson instance);
    partial void InsertStreetAddress(StreetAddress instance);
    partial void UpdateStreetAddress(StreetAddress instance);
    partial void DeleteStreetAddress(StreetAddress instance);
    #endregion
		
		public dcContractor(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContractor(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContractor(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcContractor(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerSource> CustomerSources
		{
			get
			{
				return this.GetTable<CustomerSource>();
			}
		}
		
		public System.Data.Linq.Table<CustomerView> CustomerViews
		{
			get
			{
				return this.GetTable<CustomerView>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<JobType> JobTypes
		{
			get
			{
				return this.GetTable<JobType>();
			}
		}
		
		public System.Data.Linq.Table<LeadSource> LeadSources
		{
			get
			{
				return this.GetTable<LeadSource>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<PropertyView> PropertyViews
		{
			get
			{
				return this.GetTable<PropertyView>();
			}
		}
		
		public System.Data.Linq.Table<SalesPerson> SalesPersons
		{
			get
			{
				return this.GetTable<SalesPerson>();
			}
		}
		
		public System.Data.Linq.Table<StreetAddress> StreetAddresses
		{
			get
			{
				return this.GetTable<StreetAddress>();
			}
		}
		
		[Function(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.JobGet")]
		public ISingleResult<JobGetResult> JobGet([Parameter(Name="CustomerID", DbType="Int")] System.Nullable<int> customerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerID);
			return ((ISingleResult<JobGetResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_alterdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_alterdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_creatediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_creatediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_dropdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_dropdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_renamediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_renamediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _StreetAddressID;
		
		private System.Nullable<long> _HomePhone;
		
		private long _CellPhone;
		
		private string _Email;
		
		private EntityRef<StreetAddress> _StreetAddress;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<SalesPerson> _SalesPersons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreetAddressIDChanging(int value);
    partial void OnStreetAddressIDChanged();
    partial void OnHomePhoneChanging(System.Nullable<long> value);
    partial void OnHomePhoneChanged();
    partial void OnCellPhoneChanging(long value);
    partial void OnCellPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Contact()
		{
			this._StreetAddress = default(EntityRef<StreetAddress>);
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._SalesPersons = new EntitySet<SalesPerson>(new Action<SalesPerson>(this.attach_SalesPersons), new Action<SalesPerson>(this.detach_SalesPersons));
			OnCreated();
		}
		
		[Column(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAddressID", DbType="Int NOT NULL")]
		public int StreetAddressID
		{
			get
			{
				return this._StreetAddressID;
			}
			set
			{
				if ((this._StreetAddressID != value))
				{
					if (this._StreetAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetAddressIDChanging(value);
					this.SendPropertyChanging();
					this._StreetAddressID = value;
					this.SendPropertyChanged("StreetAddressID");
					this.OnStreetAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="BigInt")]
		public System.Nullable<long> HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="BigInt NOT NULL")]
		public long CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="FK_Contact_StreetAddress", Storage="_StreetAddress", ThisKey="StreetAddressID", IsForeignKey=true)]
		public StreetAddress StreetAddress
		{
			get
			{
				return this._StreetAddress.Entity;
			}
			set
			{
				StreetAddress previousValue = this._StreetAddress.Entity;
				if (((previousValue != value) 
							|| (this._StreetAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StreetAddress.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._StreetAddress.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._StreetAddressID = value.StreetAddressID;
					}
					else
					{
						this._StreetAddressID = default(int);
					}
					this.SendPropertyChanged("StreetAddress");
				}
			}
		}
		
		[Association(Name="FK_Customer_Contact", Storage="_Customers", OtherKey="ContactID", DeleteRule="NO ACTION")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="FK_SalesPerson_Contact", Storage="_SalesPersons", OtherKey="ContactID", DeleteRule="NO ACTION")]
		public EntitySet<SalesPerson> SalesPersons
		{
			get
			{
				return this._SalesPersons;
			}
			set
			{
				this._SalesPersons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private int _PropertyID;
		
		private int _ContactID;
		
		private int _CustomerSourceID;
		
		private string _AdjustorsEmail;
		
		private string _Comments;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<CustomerSource> _CustomerSource;
		
		private EntityRef<Property> _Property;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnCustomerSourceIDChanging(int value);
    partial void OnCustomerSourceIDChanged();
    partial void OnAdjustorsEmailChanging(string value);
    partial void OnAdjustorsEmailChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Customer()
		{
			this._Contact = default(EntityRef<Contact>);
			this._CustomerSource = default(EntityRef<CustomerSource>);
			this._Property = default(EntityRef<Property>);
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerSourceID", DbType="Int NOT NULL")]
		public int CustomerSourceID
		{
			get
			{
				return this._CustomerSourceID;
			}
			set
			{
				if ((this._CustomerSourceID != value))
				{
					if (this._CustomerSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerSourceIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerSourceID = value;
					this.SendPropertyChanged("CustomerSourceID");
					this.OnCustomerSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustorsEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string AdjustorsEmail
		{
			get
			{
				return this._AdjustorsEmail;
			}
			set
			{
				if ((this._AdjustorsEmail != value))
				{
					this.OnAdjustorsEmailChanging(value);
					this.SendPropertyChanging();
					this._AdjustorsEmail = value;
					this.SendPropertyChanged("AdjustorsEmail");
					this.OnAdjustorsEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(511) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_Customer_Contact", Storage="_Contact", ThisKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="FK_Customer_CustomerSource", Storage="_CustomerSource", ThisKey="CustomerSourceID", IsForeignKey=true)]
		public CustomerSource CustomerSource
		{
			get
			{
				return this._CustomerSource.Entity;
			}
			set
			{
				CustomerSource previousValue = this._CustomerSource.Entity;
				if (((previousValue != value) 
							|| (this._CustomerSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerSource.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerSource.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerSourceID = value.CustomerSourceID;
					}
					else
					{
						this._CustomerSourceID = default(int);
					}
					this.SendPropertyChanged("CustomerSource");
				}
			}
		}
		
		[Association(Name="FK_Customer_Property", Storage="_Property", ThisKey="PropertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._PropertyID = value.PropertyID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[Association(Name="FK_Job_Customer", Storage="_Jobs", OtherKey="CustomerID", DeleteRule="NO ACTION")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.CustomerSource")]
	public partial class CustomerSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerSourceID;
		
		private string _SourceName;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerSourceIDChanging(int value);
    partial void OnCustomerSourceIDChanged();
    partial void OnSourceNameChanging(string value);
    partial void OnSourceNameChanged();
    #endregion
		
		public CustomerSource()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[Column(Storage="_CustomerSourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerSourceID
		{
			get
			{
				return this._CustomerSourceID;
			}
			set
			{
				if ((this._CustomerSourceID != value))
				{
					this.OnCustomerSourceIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerSourceID = value;
					this.SendPropertyChanged("CustomerSourceID");
					this.OnCustomerSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SourceName
		{
			get
			{
				return this._SourceName;
			}
			set
			{
				if ((this._SourceName != value))
				{
					this.OnSourceNameChanging(value);
					this.SendPropertyChanging();
					this._SourceName = value;
					this.SendPropertyChanged("SourceName");
					this.OnSourceNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Customer_CustomerSource", Storage="_Customers", OtherKey="CustomerSourceID", DeleteRule="NO ACTION")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerSource = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerSource = null;
		}
	}
	
	[Table(Name="dbo.CustomerView")]
	public partial class CustomerView
	{
		
		private int _CustomerID;
		
		private int _PropertyID;
		
		private string _CustomerFirstName;
		
		private string _CustomerLastName;
		
		private System.Nullable<long> _CustomerHomePhone;
		
		private long _CustomerCellPhone;
		
		private string _CustomerEmail;
		
		private string _SourceName;
		
		private string _CustomerAddress;
		
		private string _CustomerCity;
		
		private string _CustomerState;
		
		private System.Nullable<int> _CustomerZip;
		
		private string _PropertyAddress;
		
		private string _PropertyCity;
		
		private string _PropertyState;
		
		private System.Nullable<int> _PropertyZip;
		
		private string _PropertyName;
		
		private string _SalesPersonFirstName;
		
		private string _SalesPersonLastName;
		
		private System.Nullable<long> _SalesPersonHomePhone;
		
		private long _SalesPersonCellPhone;
		
		private string _SalesPersonEmail;
		
		private string _SalesPersonAddress;
		
		private string _SalesPersonCity;
		
		private string _SalesPersonState;
		
		private System.Nullable<int> _SalesPersonZip;
		
		private double _ProfitShare;
		
		private string _AdjustorsEmail;
		
		private string _Comments;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		public CustomerView()
		{
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this._CustomerID = value;
				}
			}
		}
		
		[Column(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[Column(Storage="_CustomerFirstName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerFirstName
		{
			get
			{
				return this._CustomerFirstName;
			}
			set
			{
				if ((this._CustomerFirstName != value))
				{
					this._CustomerFirstName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerLastName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerLastName
		{
			get
			{
				return this._CustomerLastName;
			}
			set
			{
				if ((this._CustomerLastName != value))
				{
					this._CustomerLastName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerHomePhone", DbType="BigInt")]
		public System.Nullable<long> CustomerHomePhone
		{
			get
			{
				return this._CustomerHomePhone;
			}
			set
			{
				if ((this._CustomerHomePhone != value))
				{
					this._CustomerHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCellPhone", DbType="BigInt NOT NULL")]
		public long CustomerCellPhone
		{
			get
			{
				return this._CustomerCellPhone;
			}
			set
			{
				if ((this._CustomerCellPhone != value))
				{
					this._CustomerCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this._CustomerEmail = value;
				}
			}
		}
		
		[Column(Storage="_SourceName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SourceName
		{
			get
			{
				return this._SourceName;
			}
			set
			{
				if ((this._SourceName != value))
				{
					this._SourceName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this._CustomerAddress = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerCity
		{
			get
			{
				return this._CustomerCity;
			}
			set
			{
				if ((this._CustomerCity != value))
				{
					this._CustomerCity = value;
				}
			}
		}
		
		[Column(Storage="_CustomerState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerState
		{
			get
			{
				return this._CustomerState;
			}
			set
			{
				if ((this._CustomerState != value))
				{
					this._CustomerState = value;
				}
			}
		}
		
		[Column(Storage="_CustomerZip", DbType="Int")]
		public System.Nullable<int> CustomerZip
		{
			get
			{
				return this._CustomerZip;
			}
			set
			{
				if ((this._CustomerZip != value))
				{
					this._CustomerZip = value;
				}
			}
		}
		
		[Column(Storage="_PropertyAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyAddress
		{
			get
			{
				return this._PropertyAddress;
			}
			set
			{
				if ((this._PropertyAddress != value))
				{
					this._PropertyAddress = value;
				}
			}
		}
		
		[Column(Storage="_PropertyCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyCity
		{
			get
			{
				return this._PropertyCity;
			}
			set
			{
				if ((this._PropertyCity != value))
				{
					this._PropertyCity = value;
				}
			}
		}
		
		[Column(Storage="_PropertyState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyState
		{
			get
			{
				return this._PropertyState;
			}
			set
			{
				if ((this._PropertyState != value))
				{
					this._PropertyState = value;
				}
			}
		}
		
		[Column(Storage="_PropertyZip", DbType="Int")]
		public System.Nullable<int> PropertyZip
		{
			get
			{
				return this._PropertyZip;
			}
			set
			{
				if ((this._PropertyZip != value))
				{
					this._PropertyZip = value;
				}
			}
		}
		
		[Column(Storage="_PropertyName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this._PropertyName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonFirstName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonFirstName
		{
			get
			{
				return this._SalesPersonFirstName;
			}
			set
			{
				if ((this._SalesPersonFirstName != value))
				{
					this._SalesPersonFirstName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonLastName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonLastName
		{
			get
			{
				return this._SalesPersonLastName;
			}
			set
			{
				if ((this._SalesPersonLastName != value))
				{
					this._SalesPersonLastName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonHomePhone", DbType="BigInt")]
		public System.Nullable<long> SalesPersonHomePhone
		{
			get
			{
				return this._SalesPersonHomePhone;
			}
			set
			{
				if ((this._SalesPersonHomePhone != value))
				{
					this._SalesPersonHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCellPhone", DbType="BigInt NOT NULL")]
		public long SalesPersonCellPhone
		{
			get
			{
				return this._SalesPersonCellPhone;
			}
			set
			{
				if ((this._SalesPersonCellPhone != value))
				{
					this._SalesPersonCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonEmail
		{
			get
			{
				return this._SalesPersonEmail;
			}
			set
			{
				if ((this._SalesPersonEmail != value))
				{
					this._SalesPersonEmail = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonAddress
		{
			get
			{
				return this._SalesPersonAddress;
			}
			set
			{
				if ((this._SalesPersonAddress != value))
				{
					this._SalesPersonAddress = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonCity
		{
			get
			{
				return this._SalesPersonCity;
			}
			set
			{
				if ((this._SalesPersonCity != value))
				{
					this._SalesPersonCity = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonState
		{
			get
			{
				return this._SalesPersonState;
			}
			set
			{
				if ((this._SalesPersonState != value))
				{
					this._SalesPersonState = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonZip", DbType="Int")]
		public System.Nullable<int> SalesPersonZip
		{
			get
			{
				return this._SalesPersonZip;
			}
			set
			{
				if ((this._SalesPersonZip != value))
				{
					this._SalesPersonZip = value;
				}
			}
		}
		
		[Column(Storage="_ProfitShare", DbType="Float NOT NULL")]
		public double ProfitShare
		{
			get
			{
				return this._ProfitShare;
			}
			set
			{
				if ((this._ProfitShare != value))
				{
					this._ProfitShare = value;
				}
			}
		}
		
		[Column(Storage="_AdjustorsEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string AdjustorsEmail
		{
			get
			{
				return this._AdjustorsEmail;
			}
			set
			{
				if ((this._AdjustorsEmail != value))
				{
					this._AdjustorsEmail = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(511) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobID;
		
		private int _JobTypeID;
		
		private int _CustomerID;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<JobType> _JobType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnJobTypeIDChanging(int value);
    partial void OnJobTypeIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public Job()
		{
			this._Customer = default(EntityRef<Customer>);
			this._JobType = default(EntityRef<JobType>);
			OnCreated();
		}
		
		[Column(Storage="_JobID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobTypeID", DbType="Int NOT NULL")]
		public int JobTypeID
		{
			get
			{
				return this._JobTypeID;
			}
			set
			{
				if ((this._JobTypeID != value))
				{
					if (this._JobType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobTypeID = value;
					this.SendPropertyChanged("JobTypeID");
					this.OnJobTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Association(Name="FK_Job_Customer", Storage="_Customer", ThisKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[Association(Name="FK_Job_JobType", Storage="_JobType", ThisKey="JobTypeID", IsForeignKey=true)]
		public JobType JobType
		{
			get
			{
				return this._JobType.Entity;
			}
			set
			{
				JobType previousValue = this._JobType.Entity;
				if (((previousValue != value) 
							|| (this._JobType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobType.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobType.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._JobTypeID = value.JobTypeID;
					}
					else
					{
						this._JobTypeID = default(int);
					}
					this.SendPropertyChanged("JobType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JobType")]
	public partial class JobType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobTypeID;
		
		private string _Title;
		
		private string _Comment;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobTypeIDChanging(int value);
    partial void OnJobTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public JobType()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_JobTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobTypeID
		{
			get
			{
				return this._JobTypeID;
			}
			set
			{
				if ((this._JobTypeID != value))
				{
					this.OnJobTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobTypeID = value;
					this.SendPropertyChanged("JobTypeID");
					this.OnJobTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="FK_Job_JobType", Storage="_Jobs", OtherKey="JobTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobType = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobType = null;
		}
	}
	
	[Table(Name="dbo.LeadSource")]
	public partial class LeadSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeadSourceID;
		
		private string _SourceName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeadSourceIDChanging(int value);
    partial void OnLeadSourceIDChanged();
    partial void OnSourceNameChanging(string value);
    partial void OnSourceNameChanged();
    #endregion
		
		public LeadSource()
		{
			OnCreated();
		}
		
		[Column(Storage="_LeadSourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeadSourceID
		{
			get
			{
				return this._LeadSourceID;
			}
			set
			{
				if ((this._LeadSourceID != value))
				{
					this.OnLeadSourceIDChanging(value);
					this.SendPropertyChanging();
					this._LeadSourceID = value;
					this.SendPropertyChanged("LeadSourceID");
					this.OnLeadSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SourceName
		{
			get
			{
				return this._SourceName;
			}
			set
			{
				if ((this._SourceName != value))
				{
					this.OnSourceNameChanging(value);
					this.SendPropertyChanging();
					this._SourceName = value;
					this.SendPropertyChanged("SourceName");
					this.OnSourceNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Property")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PropertyID;
		
		private int _StreetAddressID;
		
		private string _PropertyName;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<StreetAddress> _StreetAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnStreetAddressIDChanging(int value);
    partial void OnStreetAddressIDChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    #endregion
		
		public Property()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._StreetAddress = default(EntityRef<StreetAddress>);
			OnCreated();
		}
		
		[Column(Storage="_PropertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAddressID", DbType="Int NOT NULL")]
		public int StreetAddressID
		{
			get
			{
				return this._StreetAddressID;
			}
			set
			{
				if ((this._StreetAddressID != value))
				{
					if (this._StreetAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetAddressIDChanging(value);
					this.SendPropertyChanging();
					this._StreetAddressID = value;
					this.SendPropertyChanged("StreetAddressID");
					this.OnStreetAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Customer_Property", Storage="_Customers", OtherKey="PropertyID", DeleteRule="NO ACTION")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[Association(Name="FK_Property_StreetAddress", Storage="_StreetAddress", ThisKey="StreetAddressID", IsForeignKey=true)]
		public StreetAddress StreetAddress
		{
			get
			{
				return this._StreetAddress.Entity;
			}
			set
			{
				StreetAddress previousValue = this._StreetAddress.Entity;
				if (((previousValue != value) 
							|| (this._StreetAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StreetAddress.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._StreetAddress.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._StreetAddressID = value.StreetAddressID;
					}
					else
					{
						this._StreetAddressID = default(int);
					}
					this.SendPropertyChanged("StreetAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[Table(Name="dbo.PropertyView")]
	public partial class PropertyView
	{
		
		private string _PropertyAddress;
		
		private string _PropertyCity;
		
		private string _PropertyState;
		
		private System.Nullable<int> _PropertyZip;
		
		private string _PropertyName;
		
		private string _CustomerFirstName;
		
		private string _CustomerLastName;
		
		private System.Nullable<long> _CustomerHomePhone;
		
		private long _CustomerCellPhone;
		
		private string _CustomerEmail;
		
		private string _SourceName;
		
		private string _CustomerAddress;
		
		private string _CustomerCity;
		
		private string _CustomerState;
		
		private System.Nullable<int> _CustomerZip;
		
		private string _SalesPersonFirstName;
		
		private string _SalesPersonLastName;
		
		private System.Nullable<long> _SalesPersonHomePhone;
		
		private long _SalesPersonCellPhone;
		
		private string _SalesPersonEmail;
		
		private string _SalesPersonAddress;
		
		private string _SalesPersonCity;
		
		private string _SalesPersonState;
		
		private System.Nullable<int> _SalesPersonZip;
		
		private double _ProfitShare;
		
		private string _AdjustorsEmail;
		
		private string _Comments;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		public PropertyView()
		{
		}
		
		[Column(Storage="_PropertyAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyAddress
		{
			get
			{
				return this._PropertyAddress;
			}
			set
			{
				if ((this._PropertyAddress != value))
				{
					this._PropertyAddress = value;
				}
			}
		}
		
		[Column(Storage="_PropertyCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyCity
		{
			get
			{
				return this._PropertyCity;
			}
			set
			{
				if ((this._PropertyCity != value))
				{
					this._PropertyCity = value;
				}
			}
		}
		
		[Column(Storage="_PropertyState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyState
		{
			get
			{
				return this._PropertyState;
			}
			set
			{
				if ((this._PropertyState != value))
				{
					this._PropertyState = value;
				}
			}
		}
		
		[Column(Storage="_PropertyZip", DbType="Int")]
		public System.Nullable<int> PropertyZip
		{
			get
			{
				return this._PropertyZip;
			}
			set
			{
				if ((this._PropertyZip != value))
				{
					this._PropertyZip = value;
				}
			}
		}
		
		[Column(Storage="_PropertyName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this._PropertyName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerFirstName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerFirstName
		{
			get
			{
				return this._CustomerFirstName;
			}
			set
			{
				if ((this._CustomerFirstName != value))
				{
					this._CustomerFirstName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerLastName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerLastName
		{
			get
			{
				return this._CustomerLastName;
			}
			set
			{
				if ((this._CustomerLastName != value))
				{
					this._CustomerLastName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerHomePhone", DbType="BigInt")]
		public System.Nullable<long> CustomerHomePhone
		{
			get
			{
				return this._CustomerHomePhone;
			}
			set
			{
				if ((this._CustomerHomePhone != value))
				{
					this._CustomerHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCellPhone", DbType="BigInt NOT NULL")]
		public long CustomerCellPhone
		{
			get
			{
				return this._CustomerCellPhone;
			}
			set
			{
				if ((this._CustomerCellPhone != value))
				{
					this._CustomerCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this._CustomerEmail = value;
				}
			}
		}
		
		[Column(Storage="_SourceName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SourceName
		{
			get
			{
				return this._SourceName;
			}
			set
			{
				if ((this._SourceName != value))
				{
					this._SourceName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this._CustomerAddress = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerCity
		{
			get
			{
				return this._CustomerCity;
			}
			set
			{
				if ((this._CustomerCity != value))
				{
					this._CustomerCity = value;
				}
			}
		}
		
		[Column(Storage="_CustomerState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string CustomerState
		{
			get
			{
				return this._CustomerState;
			}
			set
			{
				if ((this._CustomerState != value))
				{
					this._CustomerState = value;
				}
			}
		}
		
		[Column(Storage="_CustomerZip", DbType="Int")]
		public System.Nullable<int> CustomerZip
		{
			get
			{
				return this._CustomerZip;
			}
			set
			{
				if ((this._CustomerZip != value))
				{
					this._CustomerZip = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonFirstName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonFirstName
		{
			get
			{
				return this._SalesPersonFirstName;
			}
			set
			{
				if ((this._SalesPersonFirstName != value))
				{
					this._SalesPersonFirstName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonLastName", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonLastName
		{
			get
			{
				return this._SalesPersonLastName;
			}
			set
			{
				if ((this._SalesPersonLastName != value))
				{
					this._SalesPersonLastName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonHomePhone", DbType="BigInt")]
		public System.Nullable<long> SalesPersonHomePhone
		{
			get
			{
				return this._SalesPersonHomePhone;
			}
			set
			{
				if ((this._SalesPersonHomePhone != value))
				{
					this._SalesPersonHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCellPhone", DbType="BigInt NOT NULL")]
		public long SalesPersonCellPhone
		{
			get
			{
				return this._SalesPersonCellPhone;
			}
			set
			{
				if ((this._SalesPersonCellPhone != value))
				{
					this._SalesPersonCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonEmail
		{
			get
			{
				return this._SalesPersonEmail;
			}
			set
			{
				if ((this._SalesPersonEmail != value))
				{
					this._SalesPersonEmail = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonAddress", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonAddress
		{
			get
			{
				return this._SalesPersonAddress;
			}
			set
			{
				if ((this._SalesPersonAddress != value))
				{
					this._SalesPersonAddress = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCity", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonCity
		{
			get
			{
				return this._SalesPersonCity;
			}
			set
			{
				if ((this._SalesPersonCity != value))
				{
					this._SalesPersonCity = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonState", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string SalesPersonState
		{
			get
			{
				return this._SalesPersonState;
			}
			set
			{
				if ((this._SalesPersonState != value))
				{
					this._SalesPersonState = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonZip", DbType="Int")]
		public System.Nullable<int> SalesPersonZip
		{
			get
			{
				return this._SalesPersonZip;
			}
			set
			{
				if ((this._SalesPersonZip != value))
				{
					this._SalesPersonZip = value;
				}
			}
		}
		
		[Column(Storage="_ProfitShare", DbType="Float NOT NULL")]
		public double ProfitShare
		{
			get
			{
				return this._ProfitShare;
			}
			set
			{
				if ((this._ProfitShare != value))
				{
					this._ProfitShare = value;
				}
			}
		}
		
		[Column(Storage="_AdjustorsEmail", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string AdjustorsEmail
		{
			get
			{
				return this._AdjustorsEmail;
			}
			set
			{
				if ((this._AdjustorsEmail != value))
				{
					this._AdjustorsEmail = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(511) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SalesPerson")]
	public partial class SalesPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesPersonID;
		
		private int _ContactID;
		
		private int _StreetAddressID;
		
		private double _ProfitShare;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<StreetAddress> _StreetAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesPersonIDChanging(int value);
    partial void OnSalesPersonIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnStreetAddressIDChanging(int value);
    partial void OnStreetAddressIDChanged();
    partial void OnProfitShareChanging(double value);
    partial void OnProfitShareChanged();
    #endregion
		
		public SalesPerson()
		{
			this._Contact = default(EntityRef<Contact>);
			this._StreetAddress = default(EntityRef<StreetAddress>);
			OnCreated();
		}
		
		[Column(Storage="_SalesPersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalesPersonID
		{
			get
			{
				return this._SalesPersonID;
			}
			set
			{
				if ((this._SalesPersonID != value))
				{
					this.OnSalesPersonIDChanging(value);
					this.SendPropertyChanging();
					this._SalesPersonID = value;
					this.SendPropertyChanged("SalesPersonID");
					this.OnSalesPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_StreetAddressID", DbType="Int NOT NULL")]
		public int StreetAddressID
		{
			get
			{
				return this._StreetAddressID;
			}
			set
			{
				if ((this._StreetAddressID != value))
				{
					if (this._StreetAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetAddressIDChanging(value);
					this.SendPropertyChanging();
					this._StreetAddressID = value;
					this.SendPropertyChanged("StreetAddressID");
					this.OnStreetAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProfitShare", DbType="Float NOT NULL")]
		public double ProfitShare
		{
			get
			{
				return this._ProfitShare;
			}
			set
			{
				if ((this._ProfitShare != value))
				{
					this.OnProfitShareChanging(value);
					this.SendPropertyChanging();
					this._ProfitShare = value;
					this.SendPropertyChanged("ProfitShare");
					this.OnProfitShareChanged();
				}
			}
		}
		
		[Association(Name="FK_SalesPerson_Contact", Storage="_Contact", ThisKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.SalesPersons.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.SalesPersons.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="FK_SalesPerson_StreetAddress", Storage="_StreetAddress", ThisKey="StreetAddressID", IsForeignKey=true)]
		public StreetAddress StreetAddress
		{
			get
			{
				return this._StreetAddress.Entity;
			}
			set
			{
				StreetAddress previousValue = this._StreetAddress.Entity;
				if (((previousValue != value) 
							|| (this._StreetAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StreetAddress.Entity = null;
						previousValue.SalesPersons.Remove(this);
					}
					this._StreetAddress.Entity = value;
					if ((value != null))
					{
						value.SalesPersons.Add(this);
						this._StreetAddressID = value.StreetAddressID;
					}
					else
					{
						this._StreetAddressID = default(int);
					}
					this.SendPropertyChanged("StreetAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StreetAddress")]
	public partial class StreetAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StreetAddressID;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private System.Nullable<int> _Zip;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<Property> _Properties;
		
		private EntitySet<SalesPerson> _SalesPersons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStreetAddressIDChanging(int value);
    partial void OnStreetAddressIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(System.Nullable<int> value);
    partial void OnZipChanged();
    #endregion
		
		public StreetAddress()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Properties = new EntitySet<Property>(new Action<Property>(this.attach_Properties), new Action<Property>(this.detach_Properties));
			this._SalesPersons = new EntitySet<SalesPerson>(new Action<SalesPerson>(this.attach_SalesPersons), new Action<SalesPerson>(this.detach_SalesPersons));
			OnCreated();
		}
		
		[Column(Storage="_StreetAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StreetAddressID
		{
			get
			{
				return this._StreetAddressID;
			}
			set
			{
				if ((this._StreetAddressID != value))
				{
					this.OnStreetAddressIDChanging(value);
					this.SendPropertyChanging();
					this._StreetAddressID = value;
					this.SendPropertyChanged("StreetAddressID");
					this.OnStreetAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(111) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="Int")]
		public System.Nullable<int> Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Association(Name="FK_Contact_StreetAddress", Storage="_Contacts", OtherKey="StreetAddressID", DeleteRule="NO ACTION")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="FK_Property_StreetAddress", Storage="_Properties", OtherKey="StreetAddressID", DeleteRule="NO ACTION")]
		public EntitySet<Property> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		[Association(Name="FK_SalesPerson_StreetAddress", Storage="_SalesPersons", OtherKey="StreetAddressID", DeleteRule="NO ACTION")]
		public EntitySet<SalesPerson> SalesPersons
		{
			get
			{
				return this._SalesPersons;
			}
			set
			{
				this._SalesPersons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = null;
		}
		
		private void attach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = this;
		}
		
		private void detach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = null;
		}
		
		private void attach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = this;
		}
		
		private void detach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.StreetAddress = null;
		}
	}
	
	public partial class JobGetResult
	{
		
		private System.Nullable<int> _JobTypeID;
		
		private string _Title;
		
		private string _Comment;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<int> _PropertyID;
		
		private string _CustomerFirstName;
		
		private string _CustomerLastName;
		
		private System.Nullable<long> _CustomerHomePhone;
		
		private System.Nullable<long> _CustomerCellPhone;
		
		private string _CustomerEmail;
		
		private string _SourceName;
		
		private string _CustomerAddress;
		
		private string _CustomerCity;
		
		private string _CustomerState;
		
		private System.Nullable<int> _CustomerZip;
		
		private string _PropertyAddress;
		
		private string _PropertyCity;
		
		private string _PropertyState;
		
		private System.Nullable<int> _PropertyZip;
		
		private string _PropertyName;
		
		private string _SalesPersonFirstName;
		
		private string _SalesPersonLastName;
		
		private System.Nullable<long> _SalesPersonHomePhone;
		
		private System.Nullable<long> _SalesPersonCellPhone;
		
		private string _SalesPersonEmail;
		
		private string _SalesPersonAddress;
		
		private string _SalesPersonCity;
		
		private string _SalesPersonState;
		
		private System.Nullable<int> _SalesPersonZip;
		
		private System.Nullable<double> _ProfitShare;
		
		private string _AdjustorsEmail;
		
		private string _Comments;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		public JobGetResult()
		{
		}
		
		[Column(Storage="_JobTypeID", DbType="Int")]
		public System.Nullable<int> JobTypeID
		{
			get
			{
				return this._JobTypeID;
			}
			set
			{
				if ((this._JobTypeID != value))
				{
					this._JobTypeID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(20)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="VarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this._CustomerID = value;
				}
			}
		}
		
		[Column(Storage="_PropertyID", DbType="Int")]
		public System.Nullable<int> PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[Column(Storage="_CustomerFirstName", DbType="VarChar(111)")]
		public string CustomerFirstName
		{
			get
			{
				return this._CustomerFirstName;
			}
			set
			{
				if ((this._CustomerFirstName != value))
				{
					this._CustomerFirstName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerLastName", DbType="VarChar(111)")]
		public string CustomerLastName
		{
			get
			{
				return this._CustomerLastName;
			}
			set
			{
				if ((this._CustomerLastName != value))
				{
					this._CustomerLastName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerHomePhone", DbType="BigInt")]
		public System.Nullable<long> CustomerHomePhone
		{
			get
			{
				return this._CustomerHomePhone;
			}
			set
			{
				if ((this._CustomerHomePhone != value))
				{
					this._CustomerHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCellPhone", DbType="BigInt")]
		public System.Nullable<long> CustomerCellPhone
		{
			get
			{
				return this._CustomerCellPhone;
			}
			set
			{
				if ((this._CustomerCellPhone != value))
				{
					this._CustomerCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_CustomerEmail", DbType="VarChar(111)")]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this._CustomerEmail = value;
				}
			}
		}
		
		[Column(Storage="_SourceName", DbType="VarChar(111)")]
		public string SourceName
		{
			get
			{
				return this._SourceName;
			}
			set
			{
				if ((this._SourceName != value))
				{
					this._SourceName = value;
				}
			}
		}
		
		[Column(Storage="_CustomerAddress", DbType="VarChar(111)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this._CustomerAddress = value;
				}
			}
		}
		
		[Column(Storage="_CustomerCity", DbType="VarChar(111)")]
		public string CustomerCity
		{
			get
			{
				return this._CustomerCity;
			}
			set
			{
				if ((this._CustomerCity != value))
				{
					this._CustomerCity = value;
				}
			}
		}
		
		[Column(Storage="_CustomerState", DbType="VarChar(111)")]
		public string CustomerState
		{
			get
			{
				return this._CustomerState;
			}
			set
			{
				if ((this._CustomerState != value))
				{
					this._CustomerState = value;
				}
			}
		}
		
		[Column(Storage="_CustomerZip", DbType="Int")]
		public System.Nullable<int> CustomerZip
		{
			get
			{
				return this._CustomerZip;
			}
			set
			{
				if ((this._CustomerZip != value))
				{
					this._CustomerZip = value;
				}
			}
		}
		
		[Column(Storage="_PropertyAddress", DbType="VarChar(111)")]
		public string PropertyAddress
		{
			get
			{
				return this._PropertyAddress;
			}
			set
			{
				if ((this._PropertyAddress != value))
				{
					this._PropertyAddress = value;
				}
			}
		}
		
		[Column(Storage="_PropertyCity", DbType="VarChar(111)")]
		public string PropertyCity
		{
			get
			{
				return this._PropertyCity;
			}
			set
			{
				if ((this._PropertyCity != value))
				{
					this._PropertyCity = value;
				}
			}
		}
		
		[Column(Storage="_PropertyState", DbType="VarChar(111)")]
		public string PropertyState
		{
			get
			{
				return this._PropertyState;
			}
			set
			{
				if ((this._PropertyState != value))
				{
					this._PropertyState = value;
				}
			}
		}
		
		[Column(Storage="_PropertyZip", DbType="Int")]
		public System.Nullable<int> PropertyZip
		{
			get
			{
				return this._PropertyZip;
			}
			set
			{
				if ((this._PropertyZip != value))
				{
					this._PropertyZip = value;
				}
			}
		}
		
		[Column(Storage="_PropertyName", DbType="VarChar(111)")]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this._PropertyName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonFirstName", DbType="VarChar(111)")]
		public string SalesPersonFirstName
		{
			get
			{
				return this._SalesPersonFirstName;
			}
			set
			{
				if ((this._SalesPersonFirstName != value))
				{
					this._SalesPersonFirstName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonLastName", DbType="VarChar(111)")]
		public string SalesPersonLastName
		{
			get
			{
				return this._SalesPersonLastName;
			}
			set
			{
				if ((this._SalesPersonLastName != value))
				{
					this._SalesPersonLastName = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonHomePhone", DbType="BigInt")]
		public System.Nullable<long> SalesPersonHomePhone
		{
			get
			{
				return this._SalesPersonHomePhone;
			}
			set
			{
				if ((this._SalesPersonHomePhone != value))
				{
					this._SalesPersonHomePhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCellPhone", DbType="BigInt")]
		public System.Nullable<long> SalesPersonCellPhone
		{
			get
			{
				return this._SalesPersonCellPhone;
			}
			set
			{
				if ((this._SalesPersonCellPhone != value))
				{
					this._SalesPersonCellPhone = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonEmail", DbType="VarChar(111)")]
		public string SalesPersonEmail
		{
			get
			{
				return this._SalesPersonEmail;
			}
			set
			{
				if ((this._SalesPersonEmail != value))
				{
					this._SalesPersonEmail = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonAddress", DbType="VarChar(111)")]
		public string SalesPersonAddress
		{
			get
			{
				return this._SalesPersonAddress;
			}
			set
			{
				if ((this._SalesPersonAddress != value))
				{
					this._SalesPersonAddress = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonCity", DbType="VarChar(111)")]
		public string SalesPersonCity
		{
			get
			{
				return this._SalesPersonCity;
			}
			set
			{
				if ((this._SalesPersonCity != value))
				{
					this._SalesPersonCity = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonState", DbType="VarChar(111)")]
		public string SalesPersonState
		{
			get
			{
				return this._SalesPersonState;
			}
			set
			{
				if ((this._SalesPersonState != value))
				{
					this._SalesPersonState = value;
				}
			}
		}
		
		[Column(Storage="_SalesPersonZip", DbType="Int")]
		public System.Nullable<int> SalesPersonZip
		{
			get
			{
				return this._SalesPersonZip;
			}
			set
			{
				if ((this._SalesPersonZip != value))
				{
					this._SalesPersonZip = value;
				}
			}
		}
		
		[Column(Storage="_ProfitShare", DbType="Float")]
		public System.Nullable<double> ProfitShare
		{
			get
			{
				return this._ProfitShare;
			}
			set
			{
				if ((this._ProfitShare != value))
				{
					this._ProfitShare = value;
				}
			}
		}
		
		[Column(Storage="_AdjustorsEmail", DbType="VarChar(111)")]
		public string AdjustorsEmail
		{
			get
			{
				return this._AdjustorsEmail;
			}
			set
			{
				if ((this._AdjustorsEmail != value))
				{
					this._AdjustorsEmail = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(511)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[Column(Storage="_Database", DbType="NVarChar(128)")]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(128)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
